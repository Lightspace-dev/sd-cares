%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(R) 8.0
%%AI8_CreatorVersion: 9.0
%%For: (Dave Castandeda) (Subia Corp)
%%Title: (Donovans2c.EPS)
%%CreationDate: 8/27/02 9:36 AM
%%BoundingBox: 147 338 457 474
%%HiResBoundingBox: 147.8271 338.9688 456.6729 473.5479
%%DocumentProcessColors:
%%DocumentSuppliedResources: procset Adobe_level2_AI5 1.2 0
%%+ procset AGM_Gradient 1.0 0
%%+ procset Adobe_ColorImage_AI6 1.3 0
%%+ procset Adobe_Illustrator_AI5 1.3 0
%%+ procset Adobe_cshow 2.0 8
%%+ procset Adobe_shading_AI8 1.0 0
%AI5_FileFormat 4.0
%AI3_ColorUsage: Color
%AI7_ImageSettings: 0
%%DocumentCustomColors: (PANTONE 195 CV)
%%+ (PANTONE 3308 CV)
%%CMYKCustomColor: 0 0.09 0.65 0 (PANTONE 128 CV)
%%+ 0 0.15 0.76 0 (PANTONE 129 CV)
%%+ 0 0.27 1 0 (PANTONE 130 CV)
%%+ 0 0.27 1 0.09 (PANTONE 131 CV)
%%+ 0 0.76 0.56 0.56 (PANTONE 195 CV)
%%+ 1 0 0.6 0.72 (PANTONE 3308 CV)
%%CMYKProcessColor: 1 1 1 1 ([Registration])
%%AI6_ColorSeparationSet: 1 1 (AI6 Default Color Separation Set) 
%%+ Options: 1 16 0 1 0 1 1 1 0 1 1 1 1 18 0 0 0 0 0 0 0 0 -1 -1
%%+ PPD: 1 21 0 0 60 45 2 2 1 0 0 1 0 0 0 0 0 0 0 0 0 0 () 
%AI3_TemplateBox: 306 396 306 396
%AI3_TileBox: 123 259 488 535
%AI3_DocumentPreview: Macintosh_ColorPic
%AI5_ArtSize: 397 307
%AI5_RulerUnits: 2
%AI5_ArtFlags: 1 0 0 1 0 0 1 0 0
%AI5_TargetResolution: 800
%AI5_NumLayers: 1
%AI8_OpenToView: 101.5 588.5 2 826 581 58 1 1 211 348 0 0
%AI5_OpenViewLayers: 7
%%PageOrigin:123 259
%%AI3_PaperRect:-16 292 381 -15
%%AI3_Margin:16 -16 -16 15
%AI7_GridSettings: 72 8 72 8 1 0 0.8 0.8 0.8 0.9 0.9 0.9
%AI9_Flatten: 1
%%EndComments
%%BeginProlog
%%BeginResource: procset Adobe_level2_AI5 1.2 0
%%Title: (Adobe Illustrator (R) Version 5.0 Level 2 Emulation)
%%Version: 1.2 0
%%CreationDate: (04/10/93) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
userdict /Adobe_level2_AI5 26 dict dup begin
	put
	/packedarray where not
	{
		userdict begin
		/packedarray
		{
			array astore readonly
		} bind def
		/setpacking /pop load def
		/currentpacking false def
	 end
		0
	} if
	pop
	userdict /defaultpacking currentpacking put true setpacking
	/initialize
	{
		Adobe_level2_AI5 begin
	} bind def
	/terminate
	{
		currentdict Adobe_level2_AI5 eq
		{
		 end
		} if
	} bind def
	mark
	/setcustomcolor where not
	{
		/findcmykcustomcolor
		{
			(AI8_CMYK_CustomColor)
			6 packedarray
		} bind def
		/findrgbcustomcolor
		{
			(AI8_RGB_CustomColor)
			5 packedarray
		} bind def
		/setcustomcolor
		{
			exch 
			aload pop dup
			(AI8_CMYK_CustomColor) eq
			{
				pop pop
				4
				{
					4 index mul
					4 1 roll
				} repeat
				5 -1 roll pop
				setcmykcolor
			}
			{
				dup (AI8_RGB_CustomColor) eq
				{
					pop pop
					3
					{
						1 exch sub
						3 index mul 
						1 exch sub
						3 1 roll
					} repeat
					4 -1 roll pop
					setrgbcolor
				}
				{
					pop
					4
					{
						4 index mul 4 1 roll
					} repeat
					5 -1 roll pop
					setcmykcolor
				} ifelse
			} ifelse
		}
		def
	} if
	/setAIseparationgray
	{
		false setoverprint
		0 setgray
		/setseparationgray where{
			pop setseparationgray
		}{
			/setcolorspace where{
				pop
				[/Separation (All) /DeviceCMYK {dup dup dup}] setcolorspace
				1 exch sub setcolor
			}{
				setgray
			}ifelse
		}ifelse
	} def
	
	/gt38? mark {version cvr cvx exec} stopped {cleartomark true} {38 gt exch pop} ifelse def
	userdict /deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt put
	userdict /level2?
	systemdict /languagelevel known dup
	{
		pop systemdict /languagelevel get 2 ge
	} if
	put
/level2ScreenFreq
{
 begin
		60
		HalftoneType 1 eq
		{
			pop Frequency
		} if
		HalftoneType 2 eq
		{
			pop GrayFrequency
		} if
		HalftoneType 5 eq
		{
			pop Default level2ScreenFreq
		} if
 end
} bind def
userdict /currentScreenFreq  
	level2? {currenthalftone level2ScreenFreq} {currentscreen pop pop} ifelse put
level2? not
	{
		/setcmykcolor where not
		{
			/setcmykcolor
			{
				exch .11 mul add exch .59 mul add exch .3 mul add
				1 exch sub setgray
			} def
		} if
		/currentcmykcolor where not
		{
			/currentcmykcolor
			{
				0 0 0 1 currentgray sub
			} def
		} if
		/setoverprint where not
		{
			/setoverprint /pop load def
		} if
		/selectfont where not
		{
			/selectfont
			{
				exch findfont exch
				dup type /arraytype eq
				{
					makefont
				}
				{
					scalefont
				} ifelse
				setfont
			} bind def
		} if
		/cshow where not
		{
			/cshow
			{
				[
				0 0 5 -1 roll aload pop
				] cvx bind forall
			} bind def
		} if
	} if
	cleartomark
	/anyColor?
	{
		add add add 0 ne
	} bind def
	/testColor
	{
		gsave
		setcmykcolor currentcmykcolor
		grestore
	} bind def
	/testCMYKColorThrough
	{
		testColor anyColor?
	} bind def
	userdict /composite?
	1 0 0 0 testCMYKColorThrough
	0 1 0 0 testCMYKColorThrough
	0 0 1 0 testCMYKColorThrough
	0 0 0 1 testCMYKColorThrough
	and and and
	put
	composite? not
	{
		userdict begin
		gsave
		/cyan? 1 0 0 0 testCMYKColorThrough def
		/magenta? 0 1 0 0 testCMYKColorThrough def
		/yellow? 0 0 1 0 testCMYKColorThrough def
		/black? 0 0 0 1 testCMYKColorThrough def
		grestore
		/isCMYKSep? cyan? magenta? yellow? black? or or or def
		/customColor? isCMYKSep? not def
	 end
	} if
 end defaultpacking setpacking
%%EndResource
%%BeginResource: procset AGM_Gradient_Sep 1.0 0
%%Title: (AGM Gradient Procset)
%%Version: 1.0 0
%%CreationDate: (4/26/96) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
userdict /defaultpacking currentpacking put true setpacking
userdict /AGM_Gradient_Sep 5 dict dup begin put
/AGM_Gradient_Sep_private 100 dict def
/initialize{
	AGM_Gradient_Sep begin
	AGM_Gradient_Sep_private begin
	_compositeJob{
		initializeSinglePassSeps
	}{
		initializeMultiPassSeps
	}ifelse
	initializeSeps
	AGM_Gradient_private begin
		/_fillSD newSpotDict def
		/_rampSD newSpotDict def
		/_nCustomColorSD nd
 end
	AGM_Gradient_Sep_private 
	{
		dup xcheck 1 index type /arraytype eq and
		{
			bind
		}if
		pop pop
	}forall
	AGM_Gradient_Sep
	{
		dup xcheck 1 index type /arraytype eq and
		{
			bind
		}if
		pop pop
	}forall
 end
	
	currentdict readonly pop	
 end
}def
/terminate{
	currentdict AGM_Gradient_Sep eq{
	 end
	}if
}def
AGM_Gradient_Sep_private begin
/initializeSeps{
	/currentoverprint { _of } def
	_noImage not _level2PS not and{
		/linealFill{
			currentoverprint{
				0 0 1 1 rectfill
			}{
				mySave
				8 setImageParms
				_color{
					_nCustomColorSD begin
						cyan magenta yellow black
	
						_spotColor{
							spot1/tintImage spot1/tintValue get 1 exch sub makeByte8 put
							spot2/tintImage spot2/tintValue get 1 exch sub makeByte8 put
						}if
				 end
	
					4{
						makeByte8 4 1 roll
					}repeat
					true 4 _nCustomColorSD ncolorimage
				}{
					_nCustomColorSD/black get 1 exch sub makeByte8 
					_nCustomColorSD bwImage
				}ifelse
				myRestore
			}ifelse
		}def
	}if
	/_whiteBytes 1 makeByte8 pt
	 /knockOut{
		_noImage _level2PS or currentoverprint or{
			gsave
			false setoverprint
			1 setgray 
			0 0 1 1 rectfill
			grestore
		}{
			8 setImageParms _whiteBytes /_image load 5 execImage
		}ifelse
	}def
	/newSpotDict{
		11 dict dup begin
			/nSpots 2 def
			/spot1 7 dict def
			/spot2 7 dict def
	 end
	}def
	/initSpotData
	{
	 begin
			/name nd
			/tintImage nd
			/tintValue nd
			/spot_C nd
			/spot_M nd
			/spot_Y nd
			/spot_K nd
	 end
	}def
	/initSpotDict{
	 begin
			/cyanInk nd
			/magentaInk nd
			/yellowInk nd
			/blackInk nd
			/cyan nd
			/magenta nd
			/yellow nd
			/black nd
			spot1 initSpotData
			spot2 initSpotData
	 end
	}def
	/copySpotDict{
		/_dst xp
	 begin
			cyanInk magentaInk yellowInk blackInk
			cyan magenta yellow black
			spot1 spot2
	 end
		_dst begin
			/spot1 spot1 maxlength dict def
			/spot2 spot2 maxlength dict def
			spot2 copy pop
			spot1 copy pop
			/black xd
			/yellow xd
			/magenta xd
			/cyan xd
			/blackInk xd
			/yellowInk xd
			/magentaInk xd
			/cyanInk xd
	 end
	}def
	/setCustomColor
	{
		1 index /Black eq{
			6 1 roll 5 npop
			1 exch sub
			setgray
		}{
			6 1 roll _ccAry1 astore exch
			dup null eq{
				pop 0
			}if
			setcustomcolor
		}ifelse
	}def
	/setCStop{
		/_colorStyle exch pt
		
		_colorStyle 0 eq{
			0 0 0
			4 -1 roll
			1 exch sub
			_spotColor{
				/_colorStyle 3 pt
				/Black
				1 index
				1 exch sub
			}if
		}if
		_colorStyle 2 eq{
			3 npop
		}if
		_rampSD _fillSD copySpotDict
		
		_colorStyle 4 eq{ 
			pop
			9 2 roll 3 npop 6 -2 roll
		} if
		
		_colorStyle 3 eq _colorStyle 4 eq or{ 	
				
			_fillSD begin
				/_spot1 spot1 pt
				/_spot2 spot2 pt
		 end
			
			exch dup _spot1/name get eq{
				_spot1 _spot2
			}{
				_spot2 _spot1
			}ifelse
		 begin
			 begin
					/name xd
					1 exch sub /tintValue xd
					4{
						tintValue mul 4 1 roll
					}repeat
					_spotColor not{
						/tintValue null def
					}if
			 end
				/tintValue 0 def
		 end
		}if
		_fillSD nsetcustomcolor
	}def
	/renderCMYK{
		spot1/name get null eq
		spot2/name get null eq and
		dup not{
			pop
			spot1 spotConverted
		}if
		dup not{
			pop
			spot2 spotConverted
		}if
	}def
	/currentInk{
		true
		_inRipSep{
			currentcolorspace 0 get
			dup /DeviceGray eq
			1 index /DeviceCMYK eq or{
				pop
				currentcmykcolor add add add 0 eq{
					pop false
				}if
			}{
				/Separation eq{
					currentcolor 0 eq{
						pop false
					}if
				}if
			}ifelse
		}{
			currentgray 1 eq{
				pop false
			}if
		}ifelse
	}def
	/currentInkN{
	
		_nCustomColorSD begin
			/_spot1 spot1 pt
			/_spot2 spot2 pt
			renderCMYK
	 end
		{
			currentInk
		}{
			gsave
			_spot1 begin
				name null ne{
					spot_C spot_M spot_Y spot_K name tintValue setCustomColor
					currentInk
				}{
					false
				}ifelse
		 end
			_spot2 begin
				name null ne{
					spot_C spot_M spot_Y spot_K name tintValue setCustomColor
					currentInk
				}{
					false
				}ifelse
		 end
			grestore
			
			or
		} ifelse
	}def
	/fill_ /fill load def
	/fillOvp{
		currentoverprint{
			_inRipSep{
				currentcolorspace 0 get
				dup /DeviceGray eq
				1 index /DeviceCMYK eq or{
					pop
					currentcmykcolor add add add 0 eq{
						newpath
					}if
				}{
					/Separation eq{
						currentcolor 0 eq{
							newpath
						}if
					}if
				}ifelse
			}{
				currentgray 1 eq{
					newpath
				}if
			}ifelse
		}if
		fill_
	}def
	/fill{
		_nCustomColorSD begin
			/_spot1 spot1 pt
			/_spot2 spot2 pt
			renderCMYK
	 end
		
		{
			fillOvp
		}{
			_spot1 begin
				gsave
				name null ne{
					spot_C spot_M spot_Y spot_K name tintValue setCustomColor
				}{
					1 setgray
				}ifelse
				fillOvp 
				grestore
		 end
			_spot2 begin
				name null ne{
					gsave
					true setoverprint
					spot_C spot_M spot_Y spot_K name tintValue setCustomColor
					fillOvp
					grestore
				}if
		 end
			newpath
		}ifelse
	}def
	/expandSpot{
		_spotColor{
			/_len xp
			_rampSD begin
				spot1 begin
					tintImage null ne{
						tintImage _len expandOne /tintImage xd
					}if
			 end
				spot2 begin
					tintImage null ne{
						tintImage _len expandOne /tintImage xd
					}if
			 end
		 end
		}{
			pop
		}ifelse
	}def
	/rampImage{
		currentoverprint{
			rectImage
		}{
			_enabledSmoothShade{
				fillRamp
			}{
				_color{
					_rampSD begin
						/cyanInk _cyanData 0 ne def
						/magentaInk _magentaData 0 ne def
						/yellowInk _yellowData 0 ne def
						/blackInk _blackData 0 ne def
				 end
					
					_nSamples setImageParms
					_nSamples expandSpot
					_cyanData _magentaData _yellowData _blackData _nSamples 4 expandColor
					true 4 _rampSD ncolorimage
				}{
					_rampSD begin
						/cyanInk false def
						/magentaInk false def
						/yellowInk false def
						/blackInk true def
				 end
					_nSamples setImageParms 
					_blackData _rampSD bwImage
				}ifelse
			}ifelse
		}ifelse
	}def
	/nsetcustomcolor where{
		pop
	}{
		/nsetcustomcolor
		{
			/_nCustomColorSD xp
			_nCustomColorSD begin
				4 copy
				/black xd
				/yellow xd
				/magenta xd
				/cyan xd
				4 copy
				0 ne /blackInk xd
				0 ne /yellowInk xd
				0 ne /magentaInk xd
				0 ne /cyanInk xd
		 end
			setcmykcolor
		}def
	}ifelse
	/nsetcustomcolorend where{
		pop
	}{
		/nsetcustomcolorend
		{
			/_nCustomColorSD null pt
		}def
	}ifelse
}def
/initializeSinglePassSeps{
	/_decodeNorm	[0 1] pt
	/_decodeInvert 	[1 0] pt
	/spotConverted
	{
	 begin
			name null eq{
				false
			}{
				tintValue null eq tintImage null eq and{
					true
				}{
					_inDistiller{
						false
					}{
						false
						currentpagedevice/SeparationColorNames get{name eq or}forall
						not
					}ifelse
				}ifelse
			}ifelse
	 end
	}def
	/dictImage
	{
		20 dict dup begin
			/Dict xd
			/Decode xd
			/DataSource xd
			/ImageMatrix xd
			/BitsPerComponent xd
			/Height xd
			/Width xd
			/ImageType 1 def
			Dict
	 end
		/_image load 1 execImage
	}def
	/bwImage{
	 begin
			gsave
			currentoverprint{
				blackInk{
					[/Separation /Black /DeviceGray{}] setcolorspace
					_decodeInvert dictImage
				}{
					5 npop
				}ifelse
			}{
				/DeviceGray setcolorspace
				_decodeNorm dictImage
			}ifelse
			grestore
	 end
	}def
	/ncolorimage where{
		pop
	}{
		/ncolorimage{
		 begin
				renderCMYK{
					cyanInk 
					magentaInk and
					yellowInk and
					blackInk and
					not
					currentoverprint 
					and{	
						pop pop
						gsave
						cyanInk{
							8 copy
							[/Separation /Cyan /DeviceGray{}] setcolorspace
							3 npop
							_decodeNorm dictImage
						}if
						magentaInk{
							8 copy
							[/Separation /Magenta /DeviceGray{}] setcolorspace
							4 -1 roll
							3 npop
							_decodeNorm dictImage
						}if
						yellowInk{
							8 copy
							[/Separation /Yellow /DeviceGray{}] setcolorspace
							4 -2 roll
							3 npop
							_decodeNorm dictImage
						}if
						blackInk{
							4 -3 roll
							[/Separation /Black /DeviceGray{}] setcolorspace
							3 npop
							_decodeNorm dictImage
						}{
							8 npop
						}ifelse
						grestore
					}{
						/_colorimage load 10 execImage
					}ifelse
				}{
					6 npop
					gsave
					spot1 begin
						name null ne tintImage null ne and{
							[/Separation name /DeviceGray{}] setcolorspace
							4 copy
							tintImage 
							name /Black eq{
								_decodeNorm
							}{
								_decodeInvert
							}ifelse 
							dictImage
						}{
							1 setgray fill
						}ifelse
				 end
					spot2 begin
						true setoverprint
						name null ne tintImage null ne and{
							[/Separation name /DeviceGray{}] setcolorspace
							tintImage 
							name /Black eq{
								_decodeNorm
							}{
								_decodeInvert
							}ifelse 
							dictImage
						}{
							4 npop
							1 setgray fill
						}ifelse
				 end
					grestore
				}ifelse
		 end
		}def
	}ifelse
	/getRampColorSpace{
		
		/_renderCMYK _rampSD begin renderCMYK end pt
		
		_renderCMYK not{
			_rampSD begin
				[/DeviceN 
					[
					spot1 begin
						name null ne tintImage null ne and{
							name
						}if
				 end
					spot2 begin
						name null ne tintImage null ne and{
							name
						}if
				 end
					]
					_inDistiller {
						/DeviceCMYK [
							spot1 begin
								name null ne tintImage null ne and{
									spot_C spot_M spot_Y spot_K 1
								}{
									0 0 0 0 0
								}ifelse
						 end
							spot2 begin
								name null ne tintImage null ne and{
									spot_C spot_M spot_Y spot_K 2
								}{
									0 0 0 0 0
								}ifelse
						 end
							5 1 roll 6 -2 roll add
							dup 1 eq {
								pop
								8 /index cvx 1 /exch cvx /sub cvx
								9 1 /roll cvx
							}{
								2 eq {
									8 /index cvx 1 /exch cvx /sub cvx
									10 1 /roll cvx
								}if
							}ifelse
							4 1 /roll cvx 5 -2 /roll cvx
							8 /index cvx /mul cvx /exch cvx 9 /index cvx /mul cvx /add cvx 7 1 /roll cvx
							3 1 /roll cvx 4 -2 /roll cvx
							7 /index cvx /mul cvx /exch cvx 8 /index cvx /mul cvx /add cvx 6 1 /roll cvx
							2 1 /roll cvx 3 -2 /roll cvx
							6 /index cvx /mul cvx /exch cvx 7 /index cvx /mul cvx /add cvx 5 1 /roll cvx
							5 /index cvx /mul cvx /exch cvx 6 /index cvx /mul cvx /add cvx 4 1 /roll cvx
							6 -2 /roll cvx /pop cvx /pop cvx
						] cvx bind
					}{
						/DeviceCMYK {}
					}ifelse
				] setcolorspace
		 end
			/_nColorSpace currentcolorspace pt
		}if
		
		_nSamples 1 gt{ 
			/_ndx 0 pt
			[blendColor] cvx exec
		}if
		_renderCMYK{
			/_C0 [currentcolor] pt
			/_C0_Space currentcolorspace pt
		}{
			/_C0 [
				_nCustomColorSD begin
					spot1 begin 
						name null ne{
							tintValue
						}if
				 end
					spot2 begin 
						name null ne{
							tintValue
						}if
				 end
			 end
			] pt
			/_C0_Space _nColorSpace pt
		}ifelse
		
		_nSamples 1 gt{ 
			/_ndx _nSamples 1 sub pt
			[blendColor] cvx exec
		}if
		_renderCMYK{
			/_C1 [currentcolor] pt
			/_C1_Space currentcolorspace pt
		}{
			/_C1 [
				_nCustomColorSD begin
					spot1 begin 
						name null ne{
							tintValue
						}if
				 end
					spot2 begin 
						name null ne{
							tintValue
						}if
				 end
			 end
			] pt
			/_C1_Space _nColorSpace pt
		}ifelse
		
		/_rampColorSpace _C0_Space pt
		_spotColor{
			nsetcustomcolorend
		}if
	}def
}def
/initializeMultiPassSeps{
	/invertXfer{
		[
		{
			1 exch sub
		}/exec load systemdict /currenttransfer get exec /exec load
		] cvx systemdict /settransfer get exec
	}def
	/ccThrough{
		gsave
		1 setCustomColor
		currentcmykcolor
		grestore
		add add add 0 ne
	}def
	/spotConverted
	{
	 begin
			_isCMYKSep not{
				false
			}{
				name null eq{
					false
				}{
					tintValue null eq tintImage null eq and{
						true
					}{
						spot_C spot_M spot_Y spot_K name ccThrough
					}ifelse
				}ifelse
			}ifelse
	 end
	}def
	/spotChannel
	{
		_isCMYKSep{
			pop false
		}{
			/_spotDict xp
				_spotDict/name get null eq{
					false
				}{
					_spotDict/spot_C get
					_spotDict/spot_M get
					_spotDict/spot_Y get
					_spotDict/spot_K get
					_spotDict/name get
					ccThrough 
				}ifelse
		}ifelse
	}def
	/getChannelData
	{
		_isCMYKSep dup{
			pop renderCMYK
		}if
		{
			_blackPlate{
				4 1 roll 3 npop blackInk
			}{
				_yellowPlate{
					4 2 roll 3 npop yellowInk
				}{
					_magentaPlate{
						4 3 roll 3 npop magentaInk
					}{
						3 npop cyanInk
					}ifelse
				}ifelse
			}ifelse
			{
				true /nonZeroData
			}{
				true /zeroData
			}ifelse
		}{
			4 npop
			spot1/name get null ne 
			spot1 spotChannel and{
				spot1/tintImage get dup null ne{
					false /nonZeroData
				}{
					pop false /noData
				}ifelse
			}{
				spot2/name get null ne 
				spot2 spotChannel and{
					spot2/tintImage get dup null ne{
						false /nonZeroData
					}{
						pop false /noData
					}ifelse
				}{
					false /noData
				}ifelse
			}ifelse
		}ifelse
	}def
	/renderChannelData
	{
		/_tmp xp
		_tmp /nonZeroData ne currentoverprint and{
			pop
			_tmp /zeroData eq{pop}if
			4 npop
		}{
			_tmp /nonZeroData eq{
				{
					invertXfer
				}if
					systemdict/image
				get 5 execImage
			}{
				pop
				_tmp /zeroData eq{pop}if
				4 npop
				knockOut
			}ifelse
		}ifelse
	}def
	/bwImage{
	 begin
			gsave
			dup dup dup
			getChannelData
			exch pop false exch
			renderChannelData
			grestore
	 end
	}def
	/ncolorimage{
	 begin
			pop pop
			gsave
			spot2/name get null ne spot2 spotChannel and{
				true setoverprint
			}if
			getChannelData 
			renderChannelData
			grestore
	 end
	}def
	/getRampColorSpace{
		
		/_renderCMYK _rampSD begin renderCMYK end pt
		
		_nSamples 1 gt{ 
			/_ndx 0 pt
			[blendColor] cvx exec
		}if
		
		_renderCMYK{
			/_C0 [currentcolor] pt
			/_C0_Space currentcolorspace pt
		}{
			/_C0 [
				_nCustomColorSD begin
					0
					spot1 begin 
						name null ne
						tintValue null ne and
						spot1 spotChannel and{
							pop tintValue
						}if
				 end
					spot2 begin 
						name null ne
						tintValue null ne and
						spot2 spotChannel and{
							pop tintValue
						}if
				 end
					1 exch sub
			 end
			] pt
			/_C0_Space /DeviceGray pt
		}ifelse
		
		_nSamples 1 gt{ 
			/_ndx _nSamples 1 sub pt
			[blendColor] cvx exec
		}if
		
		_renderCMYK{
			/_C1 [currentcolor] pt
			/_C1_Space currentcolorspace pt
		}{
			/_C1 [
				_nCustomColorSD begin
					0
					spot1 begin 
						name null ne
						tintValue null ne and
						spot1 spotChannel and{
							pop tintValue
						}if
				 end
					spot2 begin 
						name null ne
						tintValue null ne and
						spot2 spotChannel and{
							pop tintValue
						}if
				 end
					1 exch sub
			 end
			] pt
			/_C1_Space /DeviceGray pt
		}ifelse
		
		/_rampColorSpace _C0_Space pt
		_spotColor{
			nsetcustomcolorend
		}if
	}def
}def
end
end
defaultpacking setpacking
%%EndResource
%%BeginResource: procset AGM_Gradient 1.0 0
%%Title: (AGM Gradient Procset)
%%Version: 1.0 0
%%CreationDate: (4/26/96) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
userdict /defaultpacking currentpacking put true setpacking
userdict /AGM_Gradient 20 dict dup begin put
/AGM_Gradient_private 201 dict def
/initialize
{
	AGM_Gradient begin
	AGM_Gradient_private begin
	initializeVars
	
	/bd systemdict/mark get def
	/ed
		_level2PS 
		{
			(>>)
		}{
			(counttomark 2 idiv dup dict begin {def} repeat pop currentdict end)
		} ifelse
	cvx def
	
	_level2PS{
		initializeLev2
	}{
		initializeLev1
	}ifelse
	
	queryDevice
	
	initializeRectFill
	initializeShading
	initializeOps
	_producingSeps{
		AGM_Gradient_Sep/initialize get exec
	}{
		initializeComposite
	}ifelse
	_illustrator{
		/f{}def
		/F{}def
		/s{}def
		/S{}def
		/b{}def
		/B{}def
	}if
	/image where{
		/image get /_image xd
	}if
	/colorimage where{
		/colorimage get /_colorimage xd
	}if
	AGM_Gradient_private
	{
		dup xcheck 1 index type /arraytype eq and
		{
			bind
		}if
		pop pop
	}forall
	AGM_Gradient
	{
		dup xcheck 1 index type /arraytype eq and
		{
			bind
		}if
		pop pop
	}forall
 end
	
	currentdict readonly pop
 end
}def
/initializeAI
{
	pop pop 
	AGM_Gradient/AGM_Gradient_private get /_illustrator true put
	AGM_Gradient/initialize get exec
		AGM_Gradient begin
}def
/unload{
	systemdict/languagelevel known{
		systemdict/languagelevel get 2 ge{
			userdict/AGM_Gradient_Sep 2 copy known{
				undef
			}{
				pop pop
			}ifelse
			userdict/AGM_Gradient 2 copy known{
				undef
			}{
				pop pop
			}ifelse
		}if
	}if
}def
/terminate{
	currentdict AGM_Gradient eq{
	 end
	}if
}def
 
AGM_Gradient_private begin
/initializeVars{
	/_d255 256 array def
	0 1 255{
		_d255 exch dup 255 div put
	}bind for
	/_d255- 256 array def
	0 1 255{
		_d255- exch 1 _d255 2 index get sub put
	}bind for
	/_sSave nd
	/_dUserSpace matrix defaultmatrix def
	/_bUMatrix matrix def
	/_imageMatrix matrix def
	/_saveMatrix matrix def
	/_xm matrix def
	/_ccAry1 5 array def
	/_bbox 4 array pt
	/_level2PS 
		systemdict/languagelevel known dup{
			pop systemdict/languagelevel get 2 ge
		}if
	def
	/_level3PS
		_level2PS systemdict/shfill known and
	def
	currentdict /_illustrator known not{
		/_illustrator false def
	}if
	
}def
/initializeOps
{
	AGM_Gradient begin
	currentdict/Bc known not{
		/Bc{
		
			_renderFlag 2 eq _enabledSmoothShade or{
				6 npop
			}{
				pushBSpace
				_rampIndex 0 eq{
					pop pop
					setCStop
				}if
				linealFill
				popBSpace
			}ifelse
		
		}def
	}if
	
	currentdict/Bg known not{
		/Bg{
			10 npop
			/_gradName xp
			/_renderFlag xp
			/_enabledSmoothShade false pt
		
			_renderFlag 2 ne{
		
				_illustrator{
					_of setoverprint
				}if
		
				/_enabledSmoothShade 
					_level3PS{
						_usingSmoothShade
						_producingSeps not
						currentoverprint not or and
						_noImage not and
					}{
						false
					}ifelse
				pt
				
				_illustrator _eo and _renderFlag 3 eq or{
					eoclip
				}{
					clip
				}ifelse
		
				_gradNames _gradName 2 copy known{
					get
					mark exch aload pop
					/_gradType xp
					1 sub dup /_rampIndex xp
					/_maxRampIndex xp
					mark exch aload pop
					0 0
				}if
				pop pop
				getRampData
			}{
				mark mark
			}ifelse
		}def
	}if
	
	currentdict/Bm known not{
		/Bm{
			_renderFlag 2 ne{
				_gradType 0 eq{
					linealRamp
				}{
					radialGrad
				}ifelse
			}{
				6 npop
			}ifelse
		}def
	}if
	
	currentdict/Bh known not{
		/Bh{
			2 npop
			/_yHi xp
			/_xHi xp
			/_radHilite _xHi 0 ne _yHi 0 ne or pt
		}def
	}if
	
	currentdict/Bn known not{
		/Bn{
			AGM_Gradient_private begin
				dict /_gradNames xp
		 end
		}def
	}if
	
	currentdict/Bd known not{
		/Bd{
			AGM_Gradient begin
			AGM_Gradient_private begin
				/_nColorsBd xp
				/_gradType xp
				/_gradName xp
		}def
	}if
	
	currentdict/BD known not{
		/BD{
				currentdict/_gradNames known not{
					/_gradNames 20 dict def
				}if
				] _nColorsBd _gradType
				]  _gradName exch /_gradNames xput
		 end
		 end
		}def
	}if
	
	currentdict/Bb known not{
		/Bb{
		
			AGM_Gradient/AGM_Gradient_private get /_illustrator get not{
				AGM_Gradient begin
			}if
			AGM_Gradient_private begin
			_producingSeps{
				AGM_Gradient_Sep/AGM_Gradient_Sep_private get begin
			}if
			mySave
		}def
	}if
	
	currentdict/BB known not{
		/BB{
		
			/_tmp xp
			cleartomark cleartomark
		
			_tmp dup
			_renderFlag
		
			myRestore
		
			_producingSeps{
			 end
			}if
		
			_illustrator dup
		 end
			not {
			 end
			}if
		
			{
				2 ne exch 0 gt and{
					2 eq{
						s
					}{
						S
					}ifelse
				}{
					pop newpath
				}ifelse
			}{
				pop newpath
			}ifelse
		
		
		}def
	}if
	
	currentdict/Xm known not{
		/Xm{
			_xm astore pop
		}def
	}if
	
 end
}def
/queryDevice{
	/_inDistiller
		systemdict /currentdistillerparams known
	def
	/_inRipSep
		_level2PS{
			currentpagedevice/Separations 2 copy known{
				get
			}{
				pop pop false
			}ifelse
		}{
			false
		}ifelse
		_inDistiller or
	def
	/_noImage /lv1Fix where{
		pop lv1Fix
	}{
		false
	}ifelse
	def
	/_useShells where{
		/_useShells get /_usingShells xp
	}{
		/_usingShells false def
	}ifelse
	
	/_useSmoothShade where{
		pop
	}{
		/_useSmoothShade false def 
	}ifelse
	/_forceToCMYK where{
		pop
	}{
		/_forceToCMYK false def 
	}ifelse
	/_cyanPlate 1 0 0 0 testCMYKColorThrough def
	/_magentaPlate 0 1 0 0 testCMYKColorThrough def
	/_yellowPlate 0 0 1 0 testCMYKColorThrough def
	/_blackPlate 0 0 0 1 testCMYKColorThrough def
	/_compositeJob
		_cyanPlate _magentaPlate and _yellowPlate and _blackPlate and
	def
	/_isCMYKSep
		_cyanPlate _magentaPlate or _yellowPlate or _blackPlate or
	def
	/_compositeSpotDevice where{
		pop
	}{
		/_compositeSpotDevice _compositeJob not _inRipSep or{
			1
		}{
			0
		}ifelse
		def
	}ifelse
	/_producingSeps _compositeSpotDevice 0 ne def
	/_deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt def
	/_dpiThreshold where{
		pop
	}{
		/_dpiThreshold 600 def
	}ifelse
	/_screenFreqThreshold where{
		pop
	}{
		/_screenFreqThreshold 150 def
	}ifelse
	/_contoneDevice where{
		pop
	}{
		/_contoneDevice false def
	}ifelse
	/_subSampleOK 
		_deviceDPI _dpiThreshold le 
		currentScreenFreq _screenFreqThreshold le and 
		_contoneDevice not and 
	def
}def
/initializeRectFill{
	/rectfill where dup{
		exch pop not _producingSeps or
	}{
		not
	}ifelse
	{
		/rectfill{
			gsave
			newpath
			4 2 roll moveto
			1 index 0 rlineto
			0 1 index rlineto
			1 index neg 0 rlineto
			pop pop
			closepath
			fill
			grestore
		}def
	}if
}def
/initializeLev1{
	/currentScreenFreq{
		currentscreen pop pop
	}def
	/_byte 1 string def
	/colorimage where{
		pop
	}{
		/colorimage{
			pop pop
			/_blackTmp xp
			/_yellowTmp xp
			/_magentaTmp xp
			/_cyanTmp xp
			/_cnt 0 pt
			[
			_byte dup 0
			_cyanTmp 
				/_cnt cvx /get cvx _d255 /exch cvx /get cvx .3 /mul cvx
			_magentaTmp
				/_cnt cvx /get cvx _d255 /exch cvx /get cvx .59 /mul cvx
			_yellowTmp
				/_cnt cvx /get cvx _d255 /exch cvx /get cvx .11 /mul cvx
			_blackTmp 
				/_cnt cvx /get cvx _d255 /exch cvx /get cvx
			/add cvx /add cvx /add cvx 1 /exch cvx /sub cvx
			/dup cvx 0 /lt cvx{
				pop 0
			}/if cvx
			/dup cvx 1 /gt cvx{
				pop 1
			}/if cvx
			255 /mul cvx /cvi cvx
			256 /mod cvx
			/dup cvx 0 /lt cvx{
				pop 0
			}/if cvx
			/put cvx
			/_cnt dup cvx 1 /add cvx /pt cvx
			] cvx
			bind
			/_image load 5 execImage
		}def
	}ifelse
}def
/initializeLev2{
	/level2ScreenFreq{
	 begin
		60
		HalftoneType 1 eq{
			pop Frequency
		}if
		HalftoneType 2 eq{
			pop GrayFrequency
		}if
		HalftoneType 5 eq{
			pop Default level2ScreenFreq
		}if
		 end
	}def
	/currentScreenFreq{
		currenthalftone level2ScreenFreq
	}def
}def
/initializeShading{
	_useSmoothShade _level3PS and{
		/_usingSmoothShade true pt
		initializeLev3_Ops
	}{
		/_usingSmoothShade false pt
	}ifelse
}def
/initializeLev3_Ops
{
	/initShFill{
		/_index _gradType 0 eq {0}{_maxRampIndex 1 sub} ifelse pt
		/_rampFuncsArray _maxRampIndex array pt
		/_boundsArray _maxRampIndex 1 sub array pt
		/_encodeArray _maxRampIndex 2 mul array pt
		/_beginCoord _rampPoint pt
		/_colorSpace null pt
		/_firstFill _rampIndex _maxRampIndex eq pt
		/_lastFill false pt
	}def
	/linealShFill{
		popBSpace
		_xm aload pop pushBSpace
		
		/_size _index 1 add pt
		_size _maxRampIndex lt {
			/_rampFuncsArray _rampFuncsArray 0 _size getinterval pt
			/_boundsArray _boundsArray 0 _size 1 sub getinterval pt
			/_encodeArray _encodeArray 0 _size 2 mul getinterval pt
		}if
		
		bd
			/ShadingType 2
			/ColorSpace _colorSpace
			_rgbInCMYK{
				/Function [
					_cData sampFunc
					_mData sampFunc
					_yData sampFunc
					_kData sampFunc
				]
			}{
				/Function 
					bd
						/FunctionType 3
						/Domain [0 1]
						/Functions _rampFuncsArray
						/Bounds _boundsArray
						/Encode _encodeArray
					ed
			}ifelse
			/Extend [_firstFill _lastFill]
			/Domain [0 1] 
			/Coords [_beginCoord 0 _endCoord 0]
		ed
		shfill
	}def
	
	/radialShFill{
		/_size _maxRampIndex _index sub pt
		_size _maxRampIndex lt {
			/_rampFuncsArray _rampFuncsArray _index _size getinterval pt
			/_boundsArray _boundsArray _index _size 1 sub getinterval pt
			/_encodeArray _encodeArray _index 2 mul _size 2 mul getinterval pt
		}if
		
		/_rampLen _beginCoord _endCoord sub pt
		bd
			/ShadingType 3
			/ColorSpace _colorSpace
			_rgbInCMYK{
				/Function [
					_cData sampFunc
					_mData sampFunc
					_yData sampFunc
					_kData sampFunc
				]
			}{
				/Function 
					bd
						/FunctionType 3
						/Domain [0 1]
						/Functions _rampFuncsArray
						/Bounds _boundsArray
						/Encode _encodeArray
					ed
			}ifelse
			/Extend [_lastFill _firstFill]
			/Domain [0 1] 
			/Coords [_xHi _rampLen mul _yHi _rampLen mul _endCoord 0 0 _beginCoord] 
		ed
		shfill
		
		_radHilite{
			_xHi _rampLen mul _yHi _rampLen mul translate
		}if
	}def
	
	%
	/sampFunc{
		/_tmp exch pt
		bd
			_tmp length 1 eq {
				_tmp 0 get
				/_tmp 2 string pt
				dup _tmp 0 3 -1 roll put
				_tmp 1 3 -1 roll put
			}if
			/FunctionType 0
			/Order 1
			/Size [_tmp length]
			/Domain [0 1]
			/BitsPerSample 8
			/DataSource _tmp
			/Range [0 1]
		ed
	}def
	
	/fillRamp{
	
	
		/_invert _midPoint 0.5 lt pt
		_rampIndex _maxRampIndex eq {
			initShFill
		}if
		
		getRampColorSpace
		
		_colorSpace null eq{
			/_colorSpace _rampColorSpace pt
		}{
			_colorSpace _rampColorSpace ne _rgbInCMYK or{
				/_index _index 1 
				_gradType 0 eq{
					sub pt
					linealShFill
				}{
					add pt
					radialShFill
				}ifelse
				initShFill
				/_colorSpace _rampColorSpace pt
			} if
		}ifelse
		/_endCoord _endPoint pt	
		/_rgbInCMYK false pt
		_producingSeps _forceToCMYK or _rgbRamp and {
			_spotColor{
				_renderCMYK
			}{
				_isCMYKSep
			}ifelse
		}{
			false
		}ifelse
		{
			_compositeJob{
				/_rgbInCMYK true pt
				_cyanData _magentaData _yellowData _blackData _nSamples 4 expandColor
				dup length string copy /_kData exch pt
				dup length string copy /_yData exch pt
				dup length string copy /_mData exch pt
				dup length string copy /_cData exch pt
			}{
				_rampFuncsArray _index
					_cyanPlate{_cyanData}if
						_magentaPlate{_magentaData}if
						_yellowPlate{_yellowData}if
						_blackPlate{_blackData}if
					_nSamples expandOne
					sampFunc
					dup begin /Decode [1 0] def end
				put
				/_invert false pt
			}ifelse
		}{
			_rampFuncsArray _index
				bd
					/FunctionType 2
					/Domain [0 1]
					/N 0.5 log _invert{1 _midPoint sub}{_midPoint}ifelse log div
					_gradType 0 eq{
						_invert{/C1}{/C0}ifelse _C0
						_invert{/C0}{/C1}ifelse _C1
					}{
						_invert{/C0}{/C1}ifelse _C1
						_invert{/C1}{/C0}ifelse _C0
					}ifelse
				ed
			put
		}ifelse
		
		_rampIndex 1 ne{
			_boundsArray _index _gradType 1 eq{1 sub}if _endCoord put
		} if
		
		0 1 _invert {exch}if
		_encodeArray _index 2 mul 1 add 3 -1 roll put
		_encodeArray _index 2 mul 3 -1 roll put
		_rampIndex 1 eq {
			/_lastFill true pt
			_gradType 0 eq{
				linealShFill
			}{
				radialShFill
			}ifelse
		}if
		/_index _index 1 
		_gradType 0 eq{
			add pt
		}{
			sub pt
		}ifelse
	}def
}def
/initializeComposite{
	/bwImage{
		pop /_image load 5 execImage 
	}def
	/rampImage{
		_enabledSmoothShade{
			fillRamp
		}{
			_color{
				_nSamples setImageParms
	
				
				_rgbRamp _forceToCMYK not and{
					_redData _greenData _blueData _nSamples 3 expandColor
					true 3 null ncolorimage
				}{
					_cyanData _magentaData _yellowData _blackData _nSamples 4 expandColor
					true 4 null ncolorimage
				}ifelse
			}{
				_nSamples setImageParms _blackData null bwImage
			}ifelse
		}ifelse
	}def
	/setCStop{
		/_colorStyle exch pt
		_colorStyle 0 eq{
			1 exch sub
			0 0 0
			4 -1 roll
		}if
		
		_colorStyle 2 eq{
			_forceToCMYK{
				3 npop setcmykcolor
			}{
				setrgbcolor 4 npop
			}ifelse
		}if
		
		_colorStyle 3 eq{
			1 exch sub /_tmp xp
			pop
			4{
				_tmp mul 4 1 roll
			}repeat
		}if
		
		_colorStyle 4 eq{
			_forceToCMYK{
				6 npop setcmykcolor
			}{
				3 -1 roll pop pop
				1 exch sub /_tmp xp
				3{
					1 exch sub _tmp mul 1 exch sub 3 1 roll
				}repeat
				setrgbcolor 
				4 npop
			}ifelse
		}if
		_colorStyle 2 ne _colorStyle 4 ne and{
			null nsetcustomcolor
		}if
	}def
	/nsetcustomcolor
	{
		pop setcmykcolor
	}def
	/nsetcustomcolorend
	{
	}def
	/ncolorimage{
		pop 
		/_colorimage load 10 execImage
	}def
	_noImage not _level2PS not and{
		/linealFill{
			8 setImageParms
			_color{
				currentcmykcolor
				4{
					makeByte8 4 1 roll
				}repeat
				true 4 null ncolorimage
			}{
				currentgray makeByte8 null bwImage
			}ifelse
		}def
	}if
	/getRampColorSpace{
		_nSamples 1 gt{ 
			/_ndx 0 pt
			[blendColor] cvx exec
		}if
		/_C0 [currentcolor] pt
		/_C0_Space currentcolorspace pt
		
		_nSamples 1 gt{ 
			/_ndx _nSamples 1 sub pt
			[blendColor] cvx exec
		}if
		/_C1 [currentcolor] pt
		/_C1_Space currentcolorspace pt
		
		/_rampColorSpace _C0_Space pt
		
		_spotColor{
			nsetcustomcolorend
		}if
	}def
}def
/npop{
	{pop}repeat
}def
/xd{
	exch def
}def
/nd{
	null def
}def
/pt{
	AGM_Gradient_private 3 1 roll put
}def
/xp{
	exch pt
}def
/xput{
	dup load dup length exch maxlength eq{
		dup dup load dup
		length 2 mul dict copy def
	}if
	load begin
		def
  end
}def
/mySave{
	save /_sSave xp
}def
/myRestore{
	_sSave type /savetype eq{
		_sSave restore
	}if
}def
/gMark{
	counttomark 2 add -1 roll
}def
/execImage{
	/_tmp xp
	{
		exec
	}stopped{
		$error /errorname get /undefinedresult ne{
			stop
		}{
			_tmp npop
		}ifelse
	}if
}def
/pushBSpace{
	newpath gsave
	_bUMatrix astore concat 
}def
/popBSpace{
	grestore
}def
/makeByte8{
	/_tmp 0 pt
	255 mul cvi
	8 string 8{
		dup _tmp 3 index put 
		/_tmp _tmp 1 add pt
	}repeat
	exch pop
}def
/setImageParms{
	1 8 2 index 0 0 1 0 0 _imageMatrix astore
}def
/linealFill{
	0 0 1 1 rectfill
}def
/testCMYKColorThrough{
	gsave
	setcmykcolor currentcmykcolor
	grestore
	add add add 0 ne
}def
/expandOne	{
	/_tmp xp
	dup type /stringtype ne{
		_tmp string
		exch
		dup 0 ne{
			255 mul cvi
			0 1 _tmp 1 sub{
				3 copy
				exch put pop
			}for
		}if
		pop
	}if
}def
/expandColor{
	/_channels xp
	/_len xp
	_channels{
		_len expandOne _channels 1 roll
	}repeat
}def
/blendColor{
	
	_color{
		_rgbRamp _producingSeps not and _forceToCMYK not and{
			_redData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			_greenData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			_blueData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			/setrgbcolor cvx
		}{
			_cyanData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			_magentaData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			_yellowData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			_blackData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
	
			_spotColor{
				_rampSD begin
					/_rampSD cvx /begin cvx
	
					spot1 begin
						tintImage dup type /stringtype eq{
							/_ndx cvx /get cvx _d255- /exch cvx /get cvx
						}{
							dup null ne{
								name type /nametype ne{
									1 exch sub
								}if
							}if
						}ifelse
				 end
					/spot1 cvx /tintValue 3 -1 /roll cvx /put cvx
	
					spot2 begin
						tintImage dup type /stringtype eq{
							/_ndx cvx /get cvx _d255- /exch cvx /get cvx
						}{
							dup null ne{
								name type /nametype ne{
									1 exch sub
								}if
							}if
						}ifelse
				 end
					/spot2 cvx /tintValue 3 -1 /roll cvx /put cvx
					/end cvx
			 end
				/_rampSD cvx
				/nsetcustomcolor cvx
			}{
				/setcmykcolor cvx
			}ifelse
		}ifelse
	}{
		_blackData dup type /stringtype eq{
			/_ndx cvx /get cvx _d255 /exch cvx /get cvx
		}if
		
		_enabledSmoothShade{
			1 /exch cvx /sub cvx 0 0 0 4 -1 /roll cvx /setcmykcolor cvx
		}{
			 /setgray cvx
		}ifelse
	}ifelse
}def
/useRectImage{
	_subSampleOK _enabledSmoothShade not and{
		{
			mark
			0 1 dtransform atan cvi 90 mod 0 eq
			1 0 dtransform atan cvi 90 mod 0 eq
		} stopped
		{
			cleartomark
			false
		}
		{
			and exch pop
		} ifelse
	}{
		false
	}ifelse
}def
/linealImage{
	_noImage{
		rectImage
	}{
		_producingSeps{
				AGM_Gradient_Sep/AGM_Gradient_Sep_private get
				/rampImage get exec
		}{
			useRectImage{
				rectImage
			}{
				rampImage
			}ifelse
		}ifelse
	}ifelse
}def
/linealRamp{
	pushBSpace
	_ramp{
		linealImage
	}{
		linealFill
	}ifelse
	popBSpace
	/_rampIndex _rampIndex 1 sub pt
	_rampIndex 0 gt{
		getRampData
	}if
}def
/radialGrad{
	/_usingShells currentoverprint _producingSeps and _usingShells or pt
	/_firstShell true pt
	_enabledSmoothShade not{
		currentoverprint _producingSeps and{
			
			newpath
			clippath pathbbox 
			1 add 4 1 roll
			1 add 4 1 roll
			1 sub 4 1 roll
			1 sub 4 1 roll
			_bbox astore pop
			
			newpath
			_bbox 0 get _bbox 1 get moveto
			_bbox 2 get _bbox 1 get lineto
			_bbox 2 get _bbox 3 get lineto
			_bbox 0 get _bbox 3 get lineto
			closepath
			6 copy
			gsave _bUMatrix astore concat
			1 0 moveto 0 0 1 0 360 arc closepath
			eoclip fill
			popBSpace
		}{
			fill
		}ifelse
	}if
	pushBSpace
	
	_radHilite{
		_xHi _yHi _bUMatrix idtransform /_yHi xp /_xHi xp
		_rampPoint 1 lt{
			1 _rampPoint sub dup _xHi mul exch _yHi mul translate
		}if
	}if
	_rampIndex{
		radialRamp
		/_rampIndex _rampIndex 1 sub pt
		_rampIndex 0 gt{
			getRampData
		}if
	}repeat
	
	popBSpace
	
}def
/getNSamples{
	0 exch
	{
		dup type /stringtype eq{
			length exch pop exit
		}if
		pop
	}forall
	dup 0 eq{
		pop 1
	}if
}def
/getRampData{
	/_rampType gMark pt
	/_color _rampType 0 gt pt
	/_ccRGB _rampType 5 eq _rampType 6 eq or pt
	/_rgbRamp _rampType 4 eq _ccRGB or pt
	/_ccProcess _rampType 2 eq _rampType 3 eq or pt
	_producingSeps{
		_rampSD initSpotDict
		/_spotColor _ccProcess _ccRGB or pt
	}{
		/_spotColor false pt
	}ifelse
	/_ramp true pt
	100 div /_rampPoint xp
	100 div /_midPoint xp
	
	dup /_colorStyle xp
	_colorStyle 0 eq{ 
		2
	}{
		_colorStyle 1 eq{ 
			5
		}{
			_colorStyle 2 eq{
				8
			}{
				_colorStyle 3 eq{
					_producingSeps{
						_rampSD /spot1 get begin
							/name 3 index def
							/spot_K 4 index def
							/spot_Y 5 index def
							/spot_M 6 index def
							/spot_C 7 index def
					 end
					}if
					7
				}{
					_producingSeps{
						_rampSD/spot1 get begin
							/name 4 index def
							/spot_K 8 index def
							/spot_Y 9 index def
							/spot_M 10 index def
							/spot_C 11 index def
					 end
					}if
					11
				} ifelse
			}ifelse
		}ifelse
	}ifelse
	/_tmp xp
	_tmp index 100 div /_endPoint xp
	
	_gradType 1 eq{
		_tmp 1 add index 100 div /_midPoint xp
	}if
	
	_producingSeps{
		_tmp 2 add index /_nextColorStyle xp
		_nextColorStyle 3 eq{
			/_tmp _tmp 4 add pt
			_tmp index dup
			_rampSD/spot1 get /name get ne{
				_rampSD /spot2 get begin
					/name xd
					/spot_K _tmp 2 add index def
					/spot_Y _tmp 3 add index def
					/spot_M _tmp 4 add index def
					/spot_C _tmp 5 add index def
			 end
			}{
				pop
			}ifelse
		}if
		_nextColorStyle 4 eq{
			/_tmp _tmp 5 add pt
			_tmp index dup
			_rampSD/spot1 get /name get ne{
				_rampSD /spot2 get begin
					/name xd
					/spot_K _tmp 5 add index def
					/spot_Y _tmp 6 add index def
					/spot_M _tmp 7 add index def
					/spot_C _tmp 8 add index def
			 end
			}{
				pop
			}ifelse
		}if
	}if
	_rampType 3 eq _rampType 6 eq or{
		/_tint2Data gMark pt
	}if
	_ccProcess _ccRGB or{
		/_tint1Data gMark pt
	}if
	_rgbRamp{
		/_blueData gMark pt
		/_greenData gMark pt
		/_redData gMark pt
	}if
	
	_producingSeps{
		_ccProcess _ccRGB or{
			_rampType 3 eq _rampType 6 eq or{
				_rampSD /spot2 get begin
					/tintImage _gradType 0 eq{
						_tint2Data
					}{
						_tint1Data
					}ifelse
					def
					name null eq{
						/name /Black def
					}if
			 end
			}if
			_rampSD /spot1 get begin
				/tintImage _gradType 0 eq _rampType 2 eq or _rampType 5 eq or{
					_tint1Data
				}{
					_tint2Data
				}ifelse
				def
				_rampType 2 eq _rampType 5 eq or{
					name null eq{
						/name _rampSD/spot2 get /name get def
						/spot_C _rampSD/spot2 get /spot_C get def
						/spot_M _rampSD/spot2 get /spot_M get def
						/spot_Y _rampSD/spot2 get /spot_Y get def
						/spot_K _rampSD/spot2 get /spot_K get def
						_rampSD/spot2 get /name null put
					}if
				}{
					name null eq{
						/name /Black def
					}if
				}ifelse
		 end
		}if
	}if
	/_blackData gMark pt
	_rampType 0 gt{
		counttomark 4 add -3 roll
		/_yellowData xp
		/_magentaData xp
		/_cyanData xp
	}if
	_ramp{
		/_nSamples
			[
			_rampType 0 eq {_blackData}if
			_rampType 1 eq {_cyanData _magentaData _yellowData _blackData}if
			_rampType 2 eq {_cyanData _magentaData _yellowData _blackData _tint1Data}if
			_rampType 3 eq {_cyanData _magentaData _yellowData _blackData _tint1Data _tint2Data}if
			_rampType 4 eq {_cyanData _magentaData _yellowData _blackData _redData _greenData _blueData}if
			_rampType 5 eq {_cyanData _magentaData _yellowData _blackData _redData _greenData _blueData _tint1Data}if
			_rampType 6 eq {_cyanData _magentaData _yellowData _blackData _redData _greenData _blueData _tint1Data _tint2Data}if
			] getNSamples pt
		_enabledSmoothShade not {/_ramp _nSamples 1 gt pt} if
	} if
	
	setCStop
}def
/rectImage{
	gsave
	/_sInc 1 pt
	/_bInc 1 _nSamples div pt
	/_nSubSamples _nSamples pt
	/_optimize false pt
		
	_subSampleOK{
		/_uRampLen 1 0 dtransform _dUserSpace idtransform dup mul exch dup mul add sqrt pt
		/_pChange _uRampLen 0 eq{0}{_nSamples _uRampLen div}ifelse pt
		
		_pChange .5 gt dup /_optimize xp{
			/_nSubSamples _uRampLen 2 div round cvi dup 1 le{pop 2}if pt
			/_bInc 1 _nSubSamples div pt
			/_sInc _nSamples 1 sub _nSubSamples 1 sub div pt
		}if
	}if
	0
	_nSubSamples
	[
	/dup cvx
	_optimize {
		/round cvx /cvi cvx
	} if
	/_ndx /exch cvx /pt cvx
	blendColor
	0 0 _bInc 1 /rectfill cvx
	_bInc 0 /translate cvx
	_sInc /add cvx
	] cvx
	bind
	repeat
	pop
	_spotColor{
		nsetcustomcolorend
	}if
	grestore
}def
/radialInit{
	/_nRadSamples _nSamples dup 0 eq{pop 1}if pt
	/_sInc -1 pt
	/_rampLen _rampPoint _endPoint sub pt
	/_bInc _rampLen _nSamples div neg pt
	/_optimize false pt
	_subSampleOK{
		/_uRampLen
			_rampLen 0 dtransform _dUserSpace idtransform dup mul exch dup mul add sqrt
			0 _rampLen dtransform _dUserSpace idtransform dup mul exch dup mul add sqrt
			2 copy lt{
				exch
			}if pop
		pt
		/_pChange 
			_uRampLen 0 eq{
				0
			}{
				_nSamples _uRampLen div
			}ifelse
		pt
		_pChange .5 gt dup /_optimize xp{
			/_nRadSamples _uRampLen 2 div round cvi dup 1 le{pop 2}if pt
			/_bInc _rampLen _nRadSamples div neg pt
			/_sInc _nSamples 1 sub _nRadSamples 1 sub div neg pt
		}if
	}if
	_radHilite{
		/_xBCInc _xHi _rampLen mul _nRadSamples div pt
		/_yBCInc _yHi _rampLen mul _nRadSamples div pt
	}if
}def
/radialRamp{
	_enabledSmoothShade{
		fillRamp
	}{
		/_saveMatrix _saveMatrix currentmatrix def
		
		radialInit
	
		%
		%
		true
		_producingSeps _rgbRamp not and{
			_nSamples 1 gt{ 
				pop
				/_ndx 0 pt
				[blendColor] cvx exec
				currentInkN
				/_ndx _nSamples 1 sub pt
				[blendColor] cvx exec
				currentInkN
				or
			}if
		}if
		{
			_rampPoint
		
			_nSamples 1 sub
		
			_nRadSamples 
			[
				/dup cvx
		
				_optimize{
					/round cvx /cvi cvx
				}if
		
				/_ndx /exch cvx /pt cvx
				
				_usingShells{
					/_firstShell cvx{
						/_firstShell false pt
					}{
						0 0 3 index 360 0 arcn fill
					}/ifelse cvx
				}if
		
				blendColor
		
				_usingShells{
					0 0 3 /index cvx 0 360 /arc cvx 
				}{
					0 0 3 /index cvx 0 360 /arc cvx /fill cvx
				}ifelse
		
				/exch cvx _bInc /add cvx /exch cvx
		
				_sInc /add cvx
		
				_radHilite{
					_xBCInc _yBCInc /translate cvx
				}if
			] cvx bind
			repeat
		
			pop pop
		}{
			_usingShells{
				0 0 _rampPoint 360 0 arcn fill
			}if
		}ifelse
	
		_saveMatrix setmatrix
		
		_radHilite{
			_xHi _rampLen mul _yHi _rampLen mul translate
		}if
		
		_usingShells _rampIndex 1 eq and{
			fill
		}if
	
		_spotColor{
			nsetcustomcolorend
		}if
	}ifelse
}def
end
end
defaultpacking setpacking
%%EndResource
%%BeginProcSet: Adobe_ColorImage_AI6 1.3 0
userdict /Adobe_ColorImage_AI6 known not
{
	userdict /Adobe_ColorImage_AI6 53 dict put 
} if
userdict /Adobe_ColorImage_AI6 get begin
/initialize { 
	Adobe_ColorImage_AI6 begin
	Adobe_ColorImage_AI6 {
		dup type /arraytype eq {
			dup xcheck {
				bind
			} if
		} if
		pop pop
	} forall
} def
/terminate { end } def
currentdict /Adobe_ColorImage_AI6_Vars known not {
	/Adobe_ColorImage_AI6_Vars 41 dict def
} if
Adobe_ColorImage_AI6_Vars begin
	/plateindex -1 def
	/_newproc null def
	/_proc1 null def
	/_proc2 null def
	/sourcearray 4 array def
	/_ptispace null def
	/_ptiname null def
	/_pti0 0 def
	/_pti1 0 def
	/_ptiproc null def
	/_ptiscale 0 def
	/_pticomps 0 def
	/_ptibuf 0 string def
	/_gtigray 0 def
	/_cticmyk null def
	/_rtirgb null def
	/XIEnable true def
	/XIType 0 def
	/XIEncoding 0 def
	/XICompression 0 def
	/XIChannelCount 0 def
	/XIBitsPerPixel 0 def
	/XIImageHeight 0 def
	/XIImageWidth 0 def
	/XIImageMatrix null def
	/XIRowBytes 0 def
	/XIFile null def
	/XIBuffer1 null def
	/XIBuffer2 null def
	/XIBuffer3 null def
	/XIDataProc null def
	/XIColorSpace /DeviceGray def
	/XIColorValues 0 def
	/XIPlateList false def
end
/ci6colorimage /colorimage where {/colorimage get}{null} ifelse def
/ci6image systemdict /image get def
/ci6curtransfer systemdict /currenttransfer get def
/ci6curoverprint /currentoverprint where {/currentoverprint get}{{_of}} ifelse def
/ci6foureq {
	4 index ne {
		pop pop pop false
	}{
		4 index ne {
			pop pop false
		}{
			4 index ne {
				pop false
			}{
				4 index eq
			} ifelse
		} ifelse
	} ifelse
} def
/ci6testplate {
	Adobe_ColorImage_AI6_Vars begin
		/plateindex -1 def
		/setcmykcolor where {
			pop
			gsave
			1 0 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 1 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 0 1 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 0 0 1 setcmykcolor systemdict /currentgray get exec 1 exch sub
			grestore
			1 0 0 0 ci6foureq { 
				/plateindex 0 def
			}{
				0 1 0 0 ci6foureq { 
					/plateindex 1 def
				}{
					0 0 1 0 ci6foureq {
						/plateindex 2 def
					}{
						0 0 0 1 ci6foureq { 
							/plateindex 3 def
						}{
							0 0 0 0 ci6foureq {
								/plateindex 5 def
							} if
						} ifelse
					} ifelse
				} ifelse
			} ifelse
			pop pop pop pop
		} if
		plateindex
 end
} def
/ci6concatprocs {
	/packedarray where {
		pop dup type /packedarraytype eq 2 index type
		/packedarraytype eq or
	}{
		false
	} ifelse
	{
		/_proc2 exch cvlit def
		/_proc1 exch cvlit def
		_proc1 aload pop
		_proc2 aload pop
		_proc1 length
		_proc2 length add
		packedarray cvx
	}{
		/_proc2 exch cvlit def
		/_proc1 exch cvlit def
		/_newproc _proc1 length _proc2 length add array def
		_newproc 0 _proc1 putinterval
		_newproc _proc1 length _proc2 putinterval
		_newproc cvx
	} ifelse
} def
/ci6istint {
	type /arraytype eq 
} def
/ci6isspot {
	dup type /arraytype eq {
		dup length 1 sub get /Separation eq
	}{
		pop false
	} ifelse
} def
/ci6spotname {
	dup ci6isspot {dup length 2 sub get}{pop ()} ifelse
} def
/ci6altspace {
	aload pop pop pop ci6colormake
} def
/ci6numcomps {
	dup /DeviceGray eq {
		pop 1
	}{
		dup /DeviceRGB eq {
			pop 3
		}{
			/DeviceCMYK eq {
				4
			}{
				1
			} ifelse
		} ifelse
	} ifelse
} def
/ci6marksplate {
	dup /DeviceGray eq {
		pop plateindex 3 eq
	}{
		dup /DeviceRGB eq {
			pop plateindex 5 ne
		}{
			dup /DeviceCMYK eq {
				pop plateindex 5 ne
			}{
				dup ci6isspot {
					/findcmykcustomcolor where {
						pop
						dup length 2 sub get
						0.1 0.1 0.1 0.1 5 -1 roll
						findcmykcustomcolor 1 setcustomcolor
						systemdict /currentgray get exec
						1 ne
					}{
						pop plateindex 5 ne
					} ifelse
				}{
					pop plateindex 5 ne
				} ifelse
			} ifelse
		} ifelse
	} ifelse
} def
/ci6colormake {
	dup ci6numcomps
	exch 1 index 2 add 1 roll
	dup 1 eq {pop}{array astore} ifelse
	exch
} def
/ci6colorexpand {
	dup ci6spotname exch
	dup ci6istint {
		ci6altspace
		exch 4 1 roll
	}{
		1 3 1 roll
	} ifelse
} def
/ci6colortint {
	dup /DeviceGray eq {
		3 1 roll 1 exch sub mul 1 exch sub exch
	}{
		dup /DeviceRGB eq {
			3 1 roll {1 exch sub 1 index mul 1 exch sub exch} forall pop 3 array astore exch
		}{
			dup /DeviceCMYK eq {
				3 1 roll {1 index mul exch} forall pop 4 array astore exch
			}{
				3 1 roll mul exch
			} ifelse
		} ifelse
	} ifelse
} def
/ci6colortocmyk {
	dup /DeviceGray eq {
		pop 1 exch sub 0 0 0 4 -1 roll 4 array astore
	}{
		dup /DeviceRGB eq {
			pop aload pop _rgbtocmyk 4 array astore
		}{
			dup /DeviceCMYK eq {
				pop
			}{
				ci6altspace ci6colortint ci6colortocmyk
			} ifelse
		} ifelse
	} ifelse
} def
/ci6makeimagedict {
	7 dict begin
		/ImageType 1 def
		/Decode exch def
		/DataSource exch def
		/ImageMatrix exch def
		/BitsPerComponent exch def
		/Height exch def
		/Width exch def
	currentdict end
} def
/ci6stringinvert {
	0 1 2 index length 1 sub {
		dup 2 index exch get 255 exch sub 2 index 3 1 roll put
	} for
} def
/ci6stringknockout {
	0 1 2 index length 1 sub {
		255 2 index 3 1 roll put
	} for
} def
/ci6stringapply {
	0 1 4 index length 1 sub {
		dup
		4 index exch get
		3 index 3 1 roll
		3 index exec
	} for
	pop exch pop
} def
/ci6walkrgbstring {
	0 3 index
	dup length 1 sub 0 3 3 -1 roll {
		3 getinterval {} forall
		5 index exec
		3 index
	} for
	
	 5 {pop} repeat
} def
/ci6walkcmykstring
{
	0 3 index
	dup length 1 sub 0 4 3 -1 roll {
		4 getinterval {} forall
		
		6 index exec
		
		3 index
		
	} for
	
	5 { pop } repeat
	
} def
/ci6putrgbtograystr
{
	.11 mul exch
	
	.59 mul add exch
	
	.3 mul add
	
	cvi 3 copy put
	
	pop 1 add
} def
/ci6putcmyktograystr
{
	exch .11 mul add
	
	exch .59 mul add
	
	exch .3 mul add
	
	dup 255 gt { pop 255 } if
	
	255 exch sub cvi 3 copy put
	
	pop 1 add
} def
/ci6rgbtograyproc {	
	Adobe_ColorImage_AI6_Vars begin 
		sourcearray 0 get exec
		XIBuffer3
		dup 3 1 roll 
		
		/ci6putrgbtograystr load exch
		ci6walkrgbstring
 end
} def
/ci6cmyktograyproc {	
	Adobe_ColorImage_AI6_Vars begin
		sourcearray 0 get exec
		XIBuffer3
		dup 3 1 roll 
		
		/ci6putcmyktograystr load exch
		ci6walkcmykstring
 end
} def
/ci6separatecmykproc {	
	Adobe_ColorImage_AI6_Vars begin
		sourcearray 0 get exec
		
		XIBuffer3
		
		0 2 index
		
		plateindex 4 2 index length 1 sub {
			get 255 exch sub
			
			3 copy put pop 1 add
			
			2 index
		} for
		pop pop exch pop
 end
} def
	
/ci6compositeimage {
	dup 1 eq {
		pop pop image
	}{
		/ci6colorimage load null ne {
			ci6colorimage
		}{
			3 1 roll pop
			sourcearray 0 3 -1 roll put
			3 eq {/ci6rgbtograyproc}{/ci6cmyktograyproc} ifelse load
			image
		} ifelse
	} ifelse
} def
/ci6knockoutimage {
	gsave
	0 ci6curtransfer exec 1 ci6curtransfer exec
	eq {
		0 ci6curtransfer exec 0.5 lt
	}{
		0 ci6curtransfer exec 1 ci6curtransfer exec gt
	} ifelse
	{{pop 0}}{{pop 1}} ifelse
	systemdict /settransfer get exec
	ci6compositeimage
	grestore
} def
/ci6drawimage {
	ci6testplate -1 eq {
		pop ci6compositeimage
	}{
		dup type /arraytype eq {
			dup length plateindex gt {plateindex get}{pop false} ifelse
		}{
			{
				true
			}{
				dup 1 eq {plateindex 3 eq}{plateindex 3 le} ifelse
			} ifelse
		} ifelse
		{
			dup 1 eq {
				pop pop ci6image
			}{
				dup 3 eq {
					ci6compositeimage
				}{
					pop pop
					sourcearray 0 3 -1 roll put
					/ci6separatecmykproc load
					ci6image
				} ifelse
			} ifelse
		}{
			ci6curoverprint {
				7 {pop} repeat
			}{
				ci6knockoutimage
			} ifelse
		} ifelse
	} ifelse
} def
/ci6proctintimage {
	/_ptispace exch store /_ptiname exch store /_pti1 exch store /_pti0 exch store /_ptiproc exch store
	/_pticomps _ptispace ci6numcomps store
	/_ptiscale _pti1 _pti0 sub store
	level2? {
		_ptiname length 0 gt version cvr 2012 ge and {
			[/Separation _ptiname _ptispace {_ptiproc}] setcolorspace
			[_pti0 _pti1] ci6makeimagedict ci6image
		}{
			[/Indexed _ptispace 255 {255 div _ptiscale mul _pti0 add _ptiproc}] setcolorspace
			[0 255] ci6makeimagedict ci6image
		} ifelse
	}{
		_pticomps 1 eq {
			{
				dup
				{
					255 div _ptiscale mul _pti0 add _ptiproc 255 mul cvi put
				} ci6stringapply
			} ci6concatprocs ci6image
		}{
			{
				dup length _pticomps mul dup _ptibuf length ne {/_ptibuf exch string store}{pop} ifelse
				_ptibuf {
					exch _pticomps mul exch 255 div _ptiscale mul _pti0 add _ptiproc
					_pticomps 2 add -2 roll
					_pticomps 1 sub -1 0 {
						1 index add 2 index exch
						5 -1 roll
						255 mul cvi put
					} for
					pop pop
				} ci6stringapply
			} ci6concatprocs false _pticomps
			/ci6colorimage load null eq {7 {pop} repeat}{ci6colorimage} ifelse
		} ifelse
	} ifelse
} def
/ci6graytintimage {
	/_gtigray 5 -1 roll store
	{1 _gtigray sub mul 1 exch sub} 4 1 roll
	/DeviceGray ci6proctintimage
} def
/ci6cmyktintimage {
	/_cticmyk 5 -1 roll store
	{_cticmyk {1 index mul exch} forall pop} 4 1 roll
	/DeviceCMYK ci6proctintimage
} def
/ci6rgbtintimage {
	/_rtirgb 5 -1 roll store
	{_rtirgb {1 exch sub 1 index mul 1 exch sub exch} forall pop} 4 1 roll
	/DeviceRGB ci6proctintimage
} def
/ci6tintimage {
	ci6testplate -1 eq {
		ci6colorexpand
		3 -1 roll 5 -1 roll {0}{0 exch} ifelse 4 2 roll
		dup /DeviceGray eq {
			pop ci6graytintimage
		}{
			dup /DeviceRGB eq {
				pop ci6rgbtintimage
			}{
				pop ci6cmyktintimage
			} ifelse
		} ifelse
	}{
		dup ci6marksplate {
			plateindex 5 lt {
				ci6colortocmyk plateindex get
				dup 0 eq ci6curoverprint and {
					7 {pop} repeat
				}{
					1 exch sub
					exch {1 0}{0 1} ifelse () ci6graytintimage
				} ifelse
			}{
				pop exch {0}{0 exch} ifelse 0 3 1 roll () ci6graytintimage
			} ifelse
		}{
			ci6curoverprint {
				8 {pop} repeat
			}{
				pop pop pop
				{pop 1} 0 1 () /DeviceGray ci6proctintimage
			} ifelse
		} ifelse
	} ifelse
} def
/XINullImage {
} def
/XIImageMask {
	XIImageWidth XIImageHeight false
	[XIImageWidth 0 0 XIImageHeight neg 0 0]
	/XIDataProc load
	imagemask
} def
/XIImageTint {
	XIImageWidth XIImageHeight XIBitsPerPixel
	[XIImageWidth 0 0 XIImageHeight neg 0 0]
	/XIDataProc load
	XIType 3 eq XIColorValues XIColorSpace ci6tintimage
} def
/XIImage {
	XIImageWidth XIImageHeight XIBitsPerPixel
	[XIImageWidth 0 0 XIImageHeight neg 0 0]
	/XIDataProc load
	false XIChannelCount XIPlateList ci6drawimage
} def
/XG {
	pop pop
} def
/XF {
	13 {pop} repeat
} def
/Xh {
	Adobe_ColorImage_AI6_Vars begin
		gsave
		/XIType exch def
		/XIImageHeight exch def
		/XIImageWidth exch def
		/XIImageMatrix exch def
		0 0 moveto
		XIImageMatrix concat
		XIImageWidth XIImageHeight scale
		
		/_lp /null ddef
		_fc
		/_lp /imagemask ddef
 end
} def
/XH {
	Adobe_ColorImage_AI6_Vars begin
		grestore
 end
} def
/XIEnable {
	Adobe_ColorImage_AI6_Vars /XIEnable 3 -1 roll put
} def
/XC {
	Adobe_ColorImage_AI6_Vars begin
		ci6colormake
		/XIColorSpace exch def
		/XIColorValues exch def
 end
} def
/XIPlates {
	Adobe_ColorImage_AI6_Vars begin
		/XIPlateList exch def
 end
} def
/XI
{
	Adobe_ColorImage_AI6_Vars begin
		gsave
		/XIType exch def
		cvi dup
		256 idiv /XICompression exch store
		256 mod /XIEncoding exch store
		pop pop
		/XIChannelCount exch def
		/XIBitsPerPixel exch def
		/XIImageHeight exch def
		/XIImageWidth exch def
		pop pop pop pop
		/XIImageMatrix exch def
		XIBitsPerPixel 1 eq {
			XIImageWidth 8 div ceiling cvi
		}{
			XIImageWidth XIChannelCount mul
		} ifelse
		/XIRowBytes exch def
		XIEnable {
			/XIBuffer3 XIImageWidth string def
			XICompression 0 eq {
				/XIBuffer1 XIRowBytes string def
				XIEncoding 0 eq {
					{currentfile XIBuffer1 readhexstring pop}
				}{
					{currentfile XIBuffer1 readstring pop}
				} ifelse
			}{
				/XIBuffer1 256 string def
				/XIBuffer2 XIRowBytes string def
				{currentfile XIBuffer1 readline pop (%) anchorsearch {pop} if}
				/ASCII85Decode filter /DCTDecode filter
				/XIFile exch def
				{XIFile XIBuffer2 readstring pop}
			} ifelse
			/XIDataProc exch def
			
			XIType 1 ne {
				0 setgray
			} if
			XIType 1 eq {
				XIImageMask
			}{
				XIType 2 eq XIType 3 eq or {
					XIImageTint
				}{
					XIImage
				} ifelse
			} ifelse
		}{
			XINullImage
		} ifelse
		/XIPlateList false def
		grestore
 end
} def
end
%%EndProcSet
%%BeginResource: procset Adobe_Illustrator_AI5 1.3 0
%%Title: (Adobe Illustrator (R) Version 8.0 Full Prolog)
%%Version: 1.3 0
%%CreationDate: (3/7/1994) ()
%%Copyright: ((C) 1987-1998 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_Illustrator_AI5_vars 112 dict dup begin
put
/_?cmyk false def
/_eo false def
/_lp /none def
/_pf
{
} def
/_ps
{
} def
/_psf
{
} def
/_pss
{
} def
/_pjsf
{
} def
/_pjss
{
} def
/_pola 0 def
/_doClip 0 def
/cf currentflat def
/_lineorientation 0 def
/_charorientation 0 def
/_yokoorientation 0 def
/_tm matrix def
/_renderStart
[
/e0 /r0 /a0 /o0 /e1 /r1 /a1 /i0
] def
/_renderEnd
[
null null null null /i1 /i1 /i1 /i1
] def
/_render -1 def
/_shift [0 0] def
/_ax 0 def
/_ay 0 def
/_cx 0 def
/_cy 0 def
/_leading
[
0 0
] def
/_ctm matrix def
/_mtx matrix def
/_sp 16#020 def
/_hyphen (-) def
/_fontSize 0 def
/_fontAscent 0 def
/_fontDescent 0 def
/_fontHeight 0 def
/_fontRotateAdjust 0 def
/Ss 256 string def
Ss 0 (fonts/) putinterval
/_cnt 0 def
/_scale [1 1] def
/_nativeEncoding 0 def
/_useNativeEncoding 0 def
/_tempEncode 0 def
/_pntr 0 def
/_tDict 2 dict def
/_hfname 100 string def
/_hffound false def
/Tx
{
} def
/Tj
{
} def
/CRender
{
} def
/_AI3_savepage
{
} def
/_gf null def
/_cf 4 array def
/_rgbf 3 array def
/_if null def
/_of false def
/_fc
{
} def
/_gs null def
/_cs 4 array def
/_rgbs 3 array def
/_is null def
/_os false def
/_sc
{
} def
/_pd 1 dict def
/_ed 15 dict def
/_pm matrix def
/_fm null def
/_fd null def
/_fdd null def
/_sm null def
/_sd null def
/_sdd null def
/_i null def
/_lobyte 0 def
/_hibyte 0 def
/_cproc null def
/_cscript 0 def
/_hvax 0 def
/_hvay 0 def
/_hvwb 0 def
/_hvcx 0 def
/_hvcy 0 def
/_bitfont null def
/_bitlobyte 0 def
/_bithibyte 0 def
/_bitkey null def
/_bitdata null def
/_bitindex 0 def
/discardSave null def
/buffer 256 string def
/beginString null def
/endString null def
/endStringLength null def
/layerCnt 1 def
/layerCount 1 def
/perCent (%) 0 get def
/perCentSeen? false def
/newBuff null def
/newBuffButFirst null def
/newBuffLast null def
/clipForward? false def
end
userdict /Adobe_Illustrator_AI5 known not {
	userdict /Adobe_Illustrator_AI5 100 dict put
} if
userdict /Adobe_Illustrator_AI5 get begin
/initialize
{
	Adobe_Illustrator_AI5 dup begin
	Adobe_Illustrator_AI5_vars begin
	/_aicmykps where {pop /_?cmyk _aicmykps def}if
	discardDict
	{
		bind pop pop
	} forall
	dup /nc get begin
	{
		dup xcheck 1 index type /operatortype ne and
		{
			bind
		} if
		pop pop
	} forall
 end
	newpath
} def
/terminate
{
 end
 end
} def
/_
null def
/ddef
{
	Adobe_Illustrator_AI5_vars 3 1 roll put
} def
/xput
{
	dup load dup length exch maxlength eq
	{
		dup dup load dup
		length 2 mul dict copy def
	} if
	load begin
	def
 end
} def
/npop
{
	{
		pop
	} repeat
} def
/hswj
{
	dup stringwidth 3 2 roll
	{
		_hvwb eq { exch _hvcx add exch _hvcy add } if
		exch _hvax add exch _hvay add
	} cforall
} def
/vswj
{
	0 0 3 -1 roll
	{
		dup 255 le
		_charorientation 1 eq
		and
		{
			dup cstring stringwidth 5 2 roll
			_hvwb eq { exch _hvcy sub exch _hvcx sub } if
			exch _hvay sub exch _hvax sub
			4 -1 roll sub exch
			3 -1 roll sub exch
		}
		{
			_hvwb eq { exch _hvcy sub exch _hvcx sub } if
			exch _hvay sub exch _hvax sub
			_fontHeight sub
		} ifelse
	} cforall
} def
/swj
{
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	_lineorientation 0 eq { hswj } { vswj } ifelse
} def
/sw
{
	0 0 0 6 3 roll swj
} def
/vjss
{
	4 1 roll
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			gsave
			false charpath currentpoint
			5 index setmatrix stroke
			grestore
			_fontRotateAdjust sub
			moveto
			_sp eq
			{
				5 index 5 index rmoveto
			} if
			2 copy rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			5 index sub
			3 index _sp eq
			{
				9 index sub
			} if
	
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
	
			gsave
			2 index false charpath
			6 index setmatrix stroke
			grestore
	
			moveto pop pop
		} ifelse
	} cforall
	6 npop
} def
/hjss
{
	4 1 roll
	{
		dup cstring
		gsave
		false charpath currentpoint
		5 index setmatrix stroke
		grestore
		moveto
		_sp eq
		{
			5 index 5 index rmoveto
		} if
		2 copy rmoveto
	} cforall
	6 npop
} def
/jss
{
	_lineorientation 0 eq { hjss } { vjss } ifelse
} def
/ss
{
	0 0 0 7 3 roll jss
} def
/vjsp
{
	4 1 roll
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			false charpath
            currentpoint
			_fontRotateAdjust sub
			moveto
			_sp eq
			{
				5 index 5 index rmoveto
			} if
			2 copy rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			5 index sub
			3 index _sp eq
			{
				9 index sub
			} if
	
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
	
			2 index false charpath
	
			moveto pop pop
		} ifelse
	} cforall
	6 npop
} def
/hjsp
{
    4 1 roll
    {
        dup cstring
        false charpath
        _sp eq
        {
            5 index 5 index rmoveto
        } if
        2 copy rmoveto
    } cforall
    6 npop
} def
/jsp
{
	matrix currentmatrix
    _lineorientation 0 eq {hjsp} {vjsp} ifelse
} def
/sp
{
    matrix currentmatrix
    0 0 0 7 3 roll
    _lineorientation 0 eq {hjsp} {vjsp} ifelse
} def
/pl
{
	transform
	0.25 sub round 0.25 add exch
	0.25 sub round 0.25 add exch
	itransform
} def
/setstrokeadjust where
{
	pop true setstrokeadjust
	/c
	{
		curveto
	} def
	/C
	/c load def
	/v
	{
		currentpoint 6 2 roll curveto
	} def
	/V
	/v load def
	/y
	{
		2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
		lineto
	} def
	/L
	/l load def
	/m
	{
		moveto
	} def
}
{
	/c
	{
		pl curveto
	} def
	/C
	/c load def
	/v
	{
		currentpoint 6 2 roll pl curveto
	} def
	/V
	/v load def
	/y
	{
		pl 2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
		pl lineto
	} def
	/L
	/l load def
	/m
	{
		pl moveto
	} def
} ifelse
/d
{
	setdash
} def
/cf
{
} def
/i
{
	dup 0 eq
	{
		pop cf
	} if
	setflat
} def
/j
{
	setlinejoin
} def
/J
{
	setlinecap
} def
/M
{
	setmiterlimit
} def
/w
{
	setlinewidth
} def
/XR
{
	0 ne
	/_eo exch ddef
} def
/H
{
} def
/h
{
	closepath
} def
/N
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			_eo {eoclip} {clip} ifelse /_doClip 0 ddef
		} if
		newpath
	}
	{
		/CRender
		{
			N
		} ddef
	} ifelse
} def
/n
{
	N
} def
/F
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			gsave _pf grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _fc
			/_doClip 0 ddef
		}
		{
			_pf
		} ifelse
	}
	{
		/CRender
		{
			F
		} ddef
	} ifelse
} def
/f
{
	closepath
	F
} def
/S
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			gsave _ps grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc
			/_doClip 0 ddef
		}
		{
			_ps
		} ifelse
	}
	{
		/CRender
		{
			S
		} ddef
	} ifelse
} def
/s
{
	closepath
	S
} def
/B
{
	_pola 0 eq
	{
		_doClip 1 eq
		gsave F grestore
		{
			gsave S grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc
			/_doClip 0 ddef
		}
		{
			S
		} ifelse
	}
	{
		/CRender
		{
			B
		} ddef
	} ifelse
} def
/b
{
	closepath
	B
} def
/W
{
	/_doClip 1 ddef
} def
/*
{
	count 0 ne
	{
		dup type /stringtype eq
		{
			pop
		} if
	} if
	newpath
} def
/u
{
} def
/U
{
} def
/q
{
	_pola 0 eq
	{
		gsave
	} if
} def
/Q
{
	_pola 0 eq
	{
		grestore
	} if
} def
/*u
{
	_pola 1 add /_pola exch ddef
} def
/*U
{
	_pola 1 sub /_pola exch ddef
	_pola 0 eq
	{
		CRender
	} if
} def
/D
{
	pop
} def
/*w
{
} def
/*W
{
} def
/`
{
	/_i save ddef
	clipForward?
	{
		nulldevice
	} if
	6 1 roll 4 npop
	concat pop
	userdict begin
	/showpage
	{
	} def
	0 setgray
	0 setlinecap
	1 setlinewidth
	0 setlinejoin
	10 setmiterlimit
	[] 0 setdash
	/setstrokeadjust where {pop false setstrokeadjust} if
	newpath
	0 setgray
	false setoverprint
} def
/~
{
 end
	_i restore
} def
/_rgbtocmyk
{
	3
	{
		1 exch sub 3 1 roll
	} repeat
	3 copy 1 4 1 roll
	3
	{
		3 index 2 copy gt
		{
			exch
		} if
		pop 4 1 roll
	} repeat
	pop pop pop
	4 1 roll
	3
	{
		3 index sub
		3 1 roll
	} repeat
	4 -1 roll
} def
/setrgbfill
{
	_rgbf astore pop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_rgbf aload pop setrgbcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/setrgbstroke
{
	_rgbs astore pop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_rgbs aload pop setrgbcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/O
{
	0 ne
	/_of exch ddef
	/_lp /none ddef
} def
/R
{
	0 ne
	/_os exch ddef
	/_lp /none ddef
} def
/g
{
	/_gf exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_gf setgray
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/G
{
	/_gs exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_gs setgray
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/k
{
	_cf astore pop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_cf aload pop setcmykcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/K
{
	_cs astore pop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_cs aload pop setcmykcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/Xa
{
	_?cmyk {
		3 npop k
	}{
		setrgbfill 4 npop
	} ifelse
} def
/XA
{
	_?cmyk {
		3 npop K
	}{
		setrgbstroke 4 npop
	} ifelse
} def
/Xs
{
	/_gf exch ddef
	5 npop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_gf setAIseparationgray
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/XS
{
	/_gs exch ddef
	5 npop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_gs setAIseparationgray
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/Xx
{
	exch
	/_gf exch ddef
	0 eq {
		findcmykcustomcolor
	}{
		_?cmyk {true}{/findrgbcustomcolor where{pop false}{true}ifelse}ifelse
		{
			4 1 roll 3 npop
			findcmykcustomcolor
		}{
			8 -4 roll 4 npop
			findrgbcustomcolor
		} ifelse
	} ifelse
	/_if exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_if _gf 1 exch sub setcustomcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/XX
{
	exch
	/_gs exch ddef
	0 eq {
		findcmykcustomcolor
	}{
		_?cmyk {true}{/findrgbcustomcolor where{pop false}{true}ifelse}ifelse
		{
			4 1 roll 3 npop
			findcmykcustomcolor
		}{
			8 -4 roll 4 npop
			findrgbcustomcolor
		} ifelse
	} ifelse
	/_is exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_is _gs 1 exch sub setcustomcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/x
{
	/_gf exch ddef
	findcmykcustomcolor
	/_if exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_if _gf 1 exch sub setcustomcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/X
{
	/_gs exch ddef
	findcmykcustomcolor
	/_is exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_is _gs 1 exch sub setcustomcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/XK
{
	3 -1 roll pop
	0 eq
	{
		1 exch sub
		3 {dup 3 1 roll mul 5 1 roll} repeat
		mul 4 1 roll
		K
	}
	{
		1 exch sub 4 1 roll
		3 {1 exch sub 3 index mul 1 exch sub 3 1 roll} repeat
		4 -1 roll pop
		XA
	} ifelse
} def
/Xk
{
	3 -1 roll pop
	0 eq
	{
		1 exch sub
		3 {dup 3 1 roll mul 5 1 roll} repeat
		mul 4 1 roll
		k
	}
	{
		1 exch sub 4 1 roll
		3 {1 exch sub 3 index mul 1 exch sub 3 1 roll} repeat
		4 -1 roll pop
		Xa
	} ifelse
} def
/A
{
	pop
} def
/annotatepage
{
userdict /annotatepage 2 copy known {get exec} {pop pop} ifelse
} def
/XT {
	pop pop
} def
/Xt {
	pop
} def
/discard
{
	save /discardSave exch store
	discardDict begin
	/endString exch store
	gt38?
	{
		2 add
	} if
	load
	stopped
	pop
 end
	discardSave restore
} bind def
userdict /discardDict 7 dict dup begin
put
/pre38Initialize
{
	/endStringLength endString length store
	/newBuff buffer 0 endStringLength getinterval store
	/newBuffButFirst newBuff 1 endStringLength 1 sub getinterval store
	/newBuffLast newBuff endStringLength 1 sub 1 getinterval store
} def
/shiftBuffer
{
	newBuff 0 newBuffButFirst putinterval
	newBuffLast 0
	currentfile read not
	{
	stop
	} if
	put
} def
0
{
	pre38Initialize
	mark
	currentfile newBuff readstring exch pop
	{
		{
			newBuff endString eq
			{
				cleartomark stop
			} if
			shiftBuffer
		} loop
	}
	{
	stop
	} ifelse
} def
1
{
	pre38Initialize
	/beginString exch store
	mark
	currentfile newBuff readstring exch pop
	{
		{
			newBuff beginString eq
			{
				/layerCount dup load 1 add store
			}
			{
				newBuff endString eq
				{
					/layerCount dup load 1 sub store
					layerCount 0 eq
					{
						cleartomark stop
					} if
				} if
			} ifelse
			shiftBuffer
		} loop
	} if
} def
2
{
	mark
	{
		currentfile buffer {readline} stopped {
			% assume error was due to overfilling the buffer
		}{
			not
			{
				stop
			} if
			endString eq {
				cleartomark stop
			} if
		}ifelse
	} loop
} def
3
{
	/beginString exch store
	/layerCnt 1 store
	mark
	{
		currentfile buffer {readline} stopped {
			% assume error was due to overfilling the buffer
		}{
			not
			{
				stop
			} if
			dup beginString eq
			{
				pop /layerCnt dup load 1 add store
			}
			{
				endString eq
				{
					layerCnt 1 eq
					{
						cleartomark stop
					}
					{
						/layerCnt dup load 1 sub store
					} ifelse
				} if
			} ifelse
		}ifelse
	} loop
} def
end
userdict /clipRenderOff 15 dict dup begin
put
{
	/n /N /s /S /f /F /b /B
}
{
	{
		_doClip 1 eq
		{
			/_doClip 0 ddef _eo {eoclip} {clip} ifelse
		} if
		newpath
	} def
} forall
/Tr /pop load def
/Bb {} def
/BB /pop load def
/Bg {12 npop} def
/Bm {6 npop} def
/Bc /Bm load def
/Bh {4 npop} def
end
/Lb
{
	6 npop
	7 2 roll
	5 npop
	0 eq
	{
		0 eq
		{
			(%AI5_BeginLayer) 1 (%AI5_EndLayer--) discard
		}
		{
			
			/clipForward? true def
			
			/Tx /pop load def
			/Tj /pop load def
			
			currentdict end clipRenderOff begin begin
		} ifelse
	}
	{
		0 eq
		{
			save /discardSave exch store
		} if
	} ifelse
} bind def
/LB
{
	discardSave dup null ne
	{
		restore
	}
	{
		pop
		clipForward?
		{
			currentdict
		 end
		 end
		 begin
					
			/clipForward? false ddef
		} if
	} ifelse
} bind def
/Pb
{
	pop pop
	0 (%AI5_EndPalette) discard
} bind def
/Np
{
	0 (%AI5_End_NonPrinting--) discard
} bind def
/Ln /pop load def
/Ap
/pop load def
/Ar
{
	72 exch div
	0 dtransform dup mul exch dup mul add sqrt
	dup 1 lt
	{
		pop 1
	} if
	setflat
} def
/Mb
{
	q
} def
/Md
{
} def
/MB
{
	Q
} def
/nc 4 dict def
nc begin
/setgray
{
	pop
} bind def
/setcmykcolor
{
	4 npop
} bind def
/setrgbcolor
{
	3 npop
} bind def
/setcustomcolor
{
	2 npop
} bind def
currentdict readonly pop
end
/XP
{
	4 npop
} bind def
/XD
{
	pop
} bind def
end
setpacking
%%EndResource
%%BeginResource: procset Adobe_cshow 2.0 8
%%Title: (Writing System Operators)
%%Version: 2.0 8
%%CreationDate: (1/23/89) ()
%%Copyright: ((C) 1992-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_cshow 14 dict dup begin put
/initialize
{
	Adobe_cshow begin
	Adobe_cshow
	{
		dup xcheck
		{
			bind
		} if
		pop pop
	} forall
 end
	Adobe_cshow begin
} def
/terminate
{
currentdict Adobe_cshow eq
	{
 end
	} if
} def
/cforall
{
	/_lobyte 0 ddef
	/_hibyte 0 ddef
	/_cproc exch ddef
	/_cscript currentfont /FontScript known { currentfont /FontScript get } { -1 } ifelse ddef
	{
		/_lobyte exch ddef
		_hibyte 0 eq
		_cscript 1 eq
		_lobyte 129 ge _lobyte 159 le and
		_lobyte 224 ge _lobyte 252 le and or and
		_cscript 2 eq
		_lobyte 161 ge _lobyte 254 le and and
		_cscript 3 eq
		_lobyte 161 ge _lobyte 254 le and and
    	_cscript 25 eq
		_lobyte 161 ge _lobyte 254 le and and
    	_cscript -1 eq
		or or or or and
		{
			/_hibyte _lobyte ddef
		}
		{
			_hibyte 256 mul _lobyte add
			_cproc
			/_hibyte 0 ddef
		} ifelse
	} forall
} def
/cstring
{
	dup 256 lt
	{
		(s) dup 0 4 3 roll put
	}
	{
		dup 256 idiv exch 256 mod
		(hl) dup dup 0 6 5 roll put 1 4 3 roll put
	} ifelse
} def
/clength
{
	0 exch
	{ 256 lt { 1 } { 2 } ifelse add } cforall
} def
/hawidthshow
{
	{
		dup cstring
		show
		_hvax _hvay rmoveto
		_hvwb eq { _hvcx _hvcy rmoveto } if
	} cforall
} def
/vawidthshow
{
	{
		dup 255 le
		_charorientation 1 eq
		and
		{
			-90 rotate
			0 _fontRotateAdjust rmoveto
			cstring
			_hvcx _hvcy _hvwb _hvax _hvay 6 -1 roll awidthshow
			0 _fontRotateAdjust neg rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			exch _hvay sub exch _hvax sub
			2 index _hvwb eq { exch _hvcy sub exch _hvcx sub } if
			3 2 roll
			cstring
			dup stringwidth pop 2 div neg _fontAscent neg rmoveto
			show
			moveto
		} ifelse
	} cforall
} def
/hvawidthshow
{
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	_lineorientation 0 eq { hawidthshow } { vawidthshow } ifelse
} def
/hvwidthshow
{
	0 0 3 -1 roll hvawidthshow
} def
/hvashow
{
	0 0 0 6 -3 roll hvawidthshow
} def
/hvshow
{
	0 0 0 0 0 6 -1 roll hvawidthshow
} def
currentdict readonly pop end
setpacking
%%EndResource
%%BeginResource: procset Adobe_shading_AI8 1.0 0
%%Title: (Adobe Illustrator 8 Shading Procset)
%%Version: 1.0 0
%%CreationDate: (12/17/97) ()
%%Copyright: ((C) 1987-1997 Adobe Systems Incorporated All Rights Reserved)
userdict /defaultpacking currentpacking put true setpacking
userdict /Adobe_shading_AI8 10 dict dup begin put
/initialize {
	Adobe_shading_AI8 begin
	Adobe_shading_AI8 bdprocs
	Mesh /initialize get exec
} def
/terminate {
	currentdict Adobe_shading_AI8 eq {
	 end
	} if
} def
/bdprocs {
	{
		dup xcheck 1 index type /arraytype eq and {
			bind
		} if
		pop pop
	} forall
} def
/X! {pop} def
/X# {pop pop} def
/Mesh 40 dict def
Mesh begin
/initialize {
	Mesh bdprocs
	Mesh begin
		/emulate? /AI8MeshEmulation where {
			pop AI8MeshEmulation
		}{
			systemdict /shfill known not
		} ifelse def
 end
} def
/bd {
	shadingdict begin
} def
/paint {
	emulate? {
	 end
	}{
		/_lp /none ddef _fc /_lp /none ddef
		
		/AIColorSpace AIColorSpace tocolorspace store
		/ColorSpace AIColorSpace topsspace store
		
		version_ge_3010.106 not systemdict /setsmoothness known and {
			0.0001 setsmoothness
		} if
		
		composite? {
			/DataSource getdatasrc def
			Matrix concat
			currentdict end
			shfill
		}{
			AIColorSpace makesmarks AIPlateList markingplate and not isoverprint and {
			 end
			}{
				/ColorSpace /DeviceGray store
				/Decode [0 1 0 1 0 1] store
				/DataSource getplatesrc def
				Matrix concat
				currentdict end
				shfill
			} ifelse
		} ifelse
	} ifelse
} def
/shadingdict 12 dict def
shadingdict begin
	/ShadingType 6 def
	/BitsPerCoordinate 16 def
	/BitsPerComponent 8 def
	/BitsPerFlag 8 def
end
/datafile null def
/databuf 256 string def
/dataptr 0 def
/srcspace null def
/srcchannels 0 def
/dstchannels 0 def
/dstplate 0 def
/srctodstcolor null def
/getplatesrc {
	/srcspace AIColorSpace store
	/srcchannels AIColorSpace getnchannels store
	/dstchannels 1 store
	/dstplate getplateindex store
	/srctodstcolor srcspace makesmarks {
		dstplate 4 eq {
			{1 exch sub}
		}{
			{srcspace tocmyk 3 dstplate sub index 1 exch sub 5 1 roll 4 {pop} repeat}
		} ifelse
	}{
		{srcchannels {pop} repeat 1}
	} ifelse store
	/datafile getdatasrc store
	/rdpatch168 load DataLength () /SubFileDecode filter
} def
/getdatasrc {
	/rdcmntline load /ASCII85Decode filter
} def
/rdpatch168 {
	/dataptr 0 store
	49 rdcount
	4 {
		dup {pop srcchannels getint8} if
		dup {pop srctodstcolor dstchannels putint8 true} if
	} repeat
	{databuf 0 dataptr getinterval}{()} ifelse
} def
/rdpatch3216 {
	/dataptr 0 store
	97 rdcount
	4 {
		dup {pop srcchannels getint16} if
		dup {pop srctodstcolor dstchannels putint16 true} if
	} repeat
	{databuf 0 dataptr getinterval}{()} ifelse
} def
/rdcount {
	dup 0 gt {
		datafile databuf dataptr 4 -1 roll getinterval readstring
		exch length dataptr add /dataptr exch store
	}{
		true
	} ifelse
} def
/getint8 {
	mark true 3 -1 roll
	{
		dup {pop datafile read} if
		dup {pop 255 div true} if
	} repeat
	{
		counttomark 1 add -1 roll pop true
	}{
		cleartomark false
	} ifelse
} def
/putint8 {
	dup dataptr add /dataptr exch store
	dataptr exch
	{
		1 sub exch
		255 mul cvi
		databuf 2 index
		3 -1 roll put
	} repeat
	pop
} def 
/getint16 {
	mark true 3 -1 roll
	{
		dup {pop datafile read} if
		dup {pop 256 mul datafile read} if
		dup {pop add 65535 div true} if
	} repeat
	{
		counttomark 1 add -1 roll pop true
	}{
		cleartomark false
	} ifelse
} def
/putint16 {
	dup 2 mul dataptr add /dataptr exch store
	dataptr exch
	{
		2 sub exch
		65535 mul cvi dup
		256 idiv databuf 3 index 3 -1 roll put
		256 mod databuf 2 index 1 add 3 -1 roll put
	} repeat
	pop
} def 
/srcbuf 256 string def
/rdcmntline {
	currentfile srcbuf readline pop
	(%) anchorsearch {pop} if
} def
/getplateindex {
	0 [cyan? magenta? yellow? black? customColor?] {{exit} if 1 add} forall
} def
/aicsarray 4 array def
/aicsaltvals 4 array def
/aicsaltcolr aicsaltvals def
/tocolorspace {
	dup type /arraytype eq {
		mark exch aload pop
		aicsarray 0 3 -1 roll put
		aicsarray 1 3 -1 roll put
		dup aicsarray 2 3 -1 roll put
		gettintxform aicsarray 3 3 -1 roll put
		counttomark aicsaltvals 0 3 -1 roll getinterval /aicsaltcolr exch store
		aicsaltcolr astore pop pop
		aicsarray
	} if
} def
/subtintxform {aicsaltcolr {1 index mul exch} forall pop} def
/addtintxform {aicsaltcolr {1 sub 1 index mul 1 add exch} forall pop} def
/gettintxform {
	/DeviceRGB eq {/addtintxform}{/subtintxform} ifelse load
} def
/getnchannels {
	dup type /arraytype eq {0 get} if
	colorspacedict exch get begin Channels end
} def
/makesmarks {
	composite? {
		pop true
	}{
		dup dup type /arraytype eq {0 get} if
		colorspacedict exch get begin MarksPlate end
	} ifelse
} def
/markingplate {
	composite? {
		pop true
	}{
		dup type /arraytype eq {
			dup length getplateindex gt {getplateindex get}{pop false} ifelse
		} if
	} ifelse
} def
/tocmyk {
	dup dup type /arraytype eq {0 get} if
	colorspacedict exch get begin ToCMYK end
} def
/topsspace {
	dup dup type /arraytype eq {0 get} if
	colorspacedict exch get begin ToPSSpace end
} def
/colorspacedict 5 dict dup begin
	/DeviceGray 4 dict dup begin
		/Channels 1 def
		/MarksPlate {pop black?} def
		/ToCMYK {pop 1 exch sub 0 0 0 4 -1 roll} def
		/ToPSSpace {} def
 end def
	/DeviceRGB 4 dict dup begin
		/Channels 3 def
		/MarksPlate {pop isCMYKSep?} def
		/ToCMYK {pop _rgbtocmyk} def
		/ToPSSpace {} def
 end def
	/DeviceCMYK 4 dict dup begin
		/Channels 4 def
		/MarksPlate {pop isCMYKSep?} def
		/ToCMYK {pop} def
		/ToPSSpace {} def
 end def
	/Separation 4 dict dup begin
		/Channels 1 def
		/MarksPlate {
			/findcmykcustomcolor where {
				pop dup 1 exch ToCMYK 5 -1 roll 1 get
				findcmykcustomcolor 1 setcustomcolor
				systemdict /currentgray get exec
				1 ne
			}{
				pop false
			} ifelse
		} def
		/ToCMYK {
			dup 2 get mark exch 4 2 roll
			3 get exec
			counttomark -1 roll tocmyk
			5 -1 roll pop
		} def
		/ToPSSpace {} def
 end def
	/Process 4 dict dup begin
		/Channels 1 def
		/MarksPlate {
			isCMYKSep? {
				1 exch ToCMYK 4 array astore getplateindex get 0 ne 
			}{
				pop false
			} ifelse
		} def
		/ToCMYK {
			dup 2 get mark exch 4 2 roll
			3 get exec
			counttomark -1 roll tocmyk
			5 -1 roll pop
		} def
		/ToPSSpace {
			4 array copy dup 0 /Separation put
		} def
 end def
end def
/isoverprint {
	/currentoverprint where {pop currentoverprint}{_of} ifelse
} def
/version_ge_3010.106 {
   version {cvr} stopped {
      pop
      false
   }{
      3010.106 ge
   } ifelse
} def
end
end
defaultpacking setpacking
%%EndResource
%%EndProlog
%%BeginSetup
userdict /_useSmoothShade true put
userdict /_aicmykps false put
userdict /_forceToCMYK false put
Adobe_level2_AI5 /initialize get exec
Adobe_cshow /initialize get exec
Adobe_Illustrator_AI5_vars Adobe_Illustrator_AI5 AGM_Gradient /initializeAI get exec
Adobe_ColorImage_AI6 /initialize get exec
Adobe_shading_AI8 /initialize get exec
Adobe_Illustrator_AI5 /initialize get exec
%AI5_Begin_NonPrinting
Np
8 Bn
%AI5_BeginGradient: (Black & White)
(Black & White) 0 2 Bd
[
<
FFFEFDFCFBFAF9F8F7F6F5F4F3F2F1F0EFEEEDECEBEAE9E8E7E6E5E4E3E2E1E0DFDEDDDCDBDAD9D8
D7D6D5D4D3D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1C0BFBEBDBCBBBAB9B8B7B6B5B4B3B2B1B0
AFAEADACABAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A999897969594939291908F8E8D8C8B8A8988
87868584838281807F7E7D7C7B7A797877767574737271706F6E6D6C6B6A69686766656463626160
5F5E5D5C5B5A595857565554535251504F4E4D4C4B4A494847464544434241403F3E3D3C3B3A3938
37363534333231302F2E2D2C2B2A292827262524232221201F1E1D1C1B1A19181716151413121110
0F0E0D0C0B0A09080706050403020100
>
0 %_Br
[
0 0 50 100 %_BS
%_0 0 50 100 Bs
1 0 50 0 %_BS
%_1 0 50 0 Bs
BD
%AI5_EndGradient
%AI5_BeginGradient: (Green & Blue)
(Green & Blue) 0 2 Bd
[
<
99999A9A9B9B9B9C9C9D9D9D9E9E9F9F9FA0A0A1A1A1A2A2A3A3A3A4A4A5A5A5A6A6A7A7A7A8A8A9
A9A9AAAAABABABACACADADADAEAEAFAFAFB0B0B1B1B1B2B2B3B3B3B4B4B5B5B5B6B6B7B7B7B8B8B9
B9B9BABABBBBBBBCBCBDBDBDBEBEBFBFBFC0C0C1C1C1C2C2C3C3C3C4C4C5C5C5C6C6C7C7C7C8C8C9
C9C9CACACBCBCBCCCCCDCDCDCECECFCFCFD0D0D1D1D1D2D2D3D3D3D4D4D5D5D5D6D6D7D7D7D8D8D9
D9D9DADADBDBDBDCDCDDDDDDDEDEDFDFDFE0E0E1E1E1E2E2E3E3E3E4E4E5E5E5E6E6E7E7E7E8E8E9
E9E9EAEAEBEBEBECECEDEDEDEEEEEFEFEFF0F0F1F1F1F2F2F3F3F3F4F4F5F5F5F6F6F7F7F7F8F8F9
F9F9FAFAFBFBFBFCFCFDFDFDFEFEFFFF
>
<
000102020304050506070808090A0B0B0C0D0E0E0F101111121314141516171718191A1A1B1C1D1D
1E1F20202122232324252626272829292A2B2C2C2D2E2F2F303132323334353536373838393A3B3B
3C3D3E3E3F404141424344444546474748494A4A4B4C4D4D4E4F5050515253535455565657585959
5A5B5C5C5D5E5F5F606162626364656566676868696A6B6B6C6D6E6E6F7071717273747475767777
78797A7A7B7C7D7D7E7F80808182838384858686878889898A8B8C8C8D8E8F8F9091929293949595
96979898999A9B9B9C9D9E9E9FA0A1A1A2A3A4A4A5A6A7A7A8A9AAAAABACADADAEAFB0B0B1B2B3B3
B4B5B6B6B7B8B9B9BABBBCBCBDBEBFBF
>
<
FFFEFDFCFBFAF9F8F7F6F5F4F3F2F1F0EFEEEDECEBEAE9E8E7E6E5E4E3E2E1E0DFDEDDDCDBDAD9D8
D7D6D5D4D3D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1C0BFBEBDBCBBBAB9B8B7B6B5B4B3B2B1B0
AFAEADACABAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A999897969594939291908F8E8D8C8B8A8988
87868584838281807F7E7D7C7B7A797877767574737271706F6E6D6C6B6A69686766656463626160
5F5E5D5C5B5A595857565554535251504F4E4D4C4B4A494847464544434241403F3E3D3C3B3A3938
37363534333231302F2E2D2C2B2A292827262524232221201F1E1D1C1B1A19181716151413121110
0F0E0D0C0B0A09080706050403020100
>
0
1 %_Br
[
1 0.75 0 0 1 50 100 %_BS
%_1 0.75 0 0 1 50 100 Bs
0.6 0 1 0 1 50 0 %_BS
%_0.6 0 1 0 1 50 0 Bs
BD
%AI5_EndGradient
%AI5_BeginGradient: (Pink, Yellow, Green)
(Pink, Yellow, Green) 0 3 Bd
[
<
00000000000000000000000000000000000000010101010101010101010101010101010101010101
01010101010202020202020202020202020202020202020202020203030303030303030303030303
03030303030303030404040404040404040404040404040404040404050505050505050505050505
05050505050505060606060606060606060606060606060606060707070707070707070707070707
07070707080808080808080808080808080808080809090909090909090909090909090909090A0A
0A0A0A0A0A0A0A0A0A0A0A0A0A0A0A0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0C0C0C0C0C0C0C0C0C
0C0C0C0C0C0C0C0C0D0D0D0D
>
<
050506060606070708080809090A0A0A0B0B0C0C0D0D0E0E0F0F1010111112121313141415151617
17181819191A1A1B1C1C1D1D1E1F1F202021222223232425252626272828292A2A2B2C2C2D2D2E2F
2F3031313233333435353637373839393A3B3B3C3D3E3E3F4040414242434445454647474849494A
4B4C4C4D4E4F4F505151525354545556575758595A5A5B5C5C5D5E5F5F6061626363646566666768
69696A6B6C6C6D6E6F707071727373747576777778797A7B7B7C7D7E7F7F80818283838485868787
88898A8B8B8C8D8E8F8F9091929394949596979898999A9B9C9D9D9E9FA0A1A2A2A3A4A5A6A7A7A8
A9AAABACADADAEAFB0B1B2B3
>
<
CCCCCBCBCBCACACAC9C9C8C8C7C7C6C6C5C5C4C4C3C2C2C1C1C0C0BFBEBEBDBDBCBBBBBAB9B9B8B7
B7B6B5B5B4B3B3B2B1B1B0AFAFAEADADACABAAAAA9A8A8A7A6A5A5A4A3A2A2A1A0A09F9E9D9C9C9B
9A999998979696959493929291908F8E8E8D8C8B8A8A8988878686858483828181807F7E7D7C7C7B
7A7978777676757473727171706F6E6D6C6B6A6A69686766656463636261605F5E5D5C5B5B5A5958
5756555453525151504F4E4D4C4B4A49484746464544434241403F3E3D3C3B3A3938383736353433
3231302F2E2D2C2B2A29282726252423222221201F1E1D1C1B1A191817161514131211100F0E0D0C
0B0A09080706050403020100
>
0
1 %_Br
<
737271706F6E6D6C6B6A696867666564636261605F5E5D5C5B5B5A59585756555453525150504F4E
4D4C4B4A4949484746454443434241403F3E3E3D3C3B3A3A393837363635343333323130302F2E2D
2D2C2B2A2A29282827262525242323222121201F1F1E1D1D1C1C1B1A1A1918181717161615141413
1312121111100F0F0E0E0D0D0C0C0C0B0B0A0A090908080807070606060505050404040303030202
020201010101010000000000
>
<
00000000000000000000000001010101010101010101010101010101010101010101010102020202
02020202020202020202020202020202020202020202030303030303030303030303030303030303
03030303030303030303030303040404040404040404040404040404040404040404040404040404
04040404040404040404050505050505050505050505050505050505050505050505050505050505
050505050505050505050505
>
<
BFBFBFC0C0C0C0C0C0C0C0C0C1C1C1C1C1C1C1C1C1C2C2C2C2C2C2C2C2C2C2C3C3C3C3C3C3C3C3C3
C3C4C4C4C4C4C4C4C4C4C4C5C5C5C5C5C5C5C5C5C5C5C6C6C6C6C6C6C6C6C6C6C6C6C7C7C7C7C7C7
C7C7C7C7C7C7C8C8C8C8C8C8C8C8C8C8C8C8C8C9C9C9C9C9C9C9C9C9C9C9C9C9C9C9CACACACACACA
CACACACACACACACACACACBCBCBCBCBCBCBCBCBCBCBCBCBCBCBCBCBCBCBCBCBCBCCCCCCCCCCCCCCCC
CCCCCCCCCCCCCCCCCCCCCCCC
>
0
1 %_Br
[
0.05 0.7 0 0 1 50 100 %_BS
%_0.05 0.7 0 0 1 50 100 Bs
0 0.02 0.8 0 1 57 36 %_BS
%_0 0.02 0.8 0 1 57 36 Bs
0.45 0 0.75 0 1 37 0 %_BS
%_0.45 0 0.75 0 1 37 0 Bs
BD
%AI5_EndGradient
%AI5_BeginGradient: (Purple, Red & Yellow)
(Purple, Red & Yellow) 0 3 Bd
[
0
<
FFFEFDFCFBFAF9F8F7F6F5F4F3F2F1F0EFEEEDECEBEAE9E8E7E6E5E4E3E2E1E0DFDEDDDCDBDAD9D8
D7D6D5D4D3D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1C0BFBEBDBCBBBAB9B8B7B6B5B4B3B2B1B0
AFAEADACABAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A999897969594939291908F8E8D8C8B8A8988
87868584838281807F7E7D7C7B7A797877767574737271706F6E6D6C6B6A69686766656463626160
5F5E5D5C5B5A595857565554535251504F4E4D4C4B4A494847464544434241403F3E3D3C3B3A3938
37363534333231302F2E2D2C2B2A292827262524232221201F1E1D1C1B1A19181716151413121110
0F0E0D0C0B0A
>
<
CCCCCCCDCDCDCDCDCECECECECECFCFCFCFD0D0D0D0D0D1D1D1D1D1D2D2D2D2D2D3D3D3D3D3D4D4D4
D4D5D5D5D5D5D6D6D6D6D6D7D7D7D7D7D8D8D8D8D8D9D9D9D9DADADADADADBDBDBDBDBDCDCDCDCDC
DDDDDDDDDDDEDEDEDEDFDFDFDFDFE0E0E0E0E0E1E1E1E1E1E2E2E2E2E2E3E3E3E3E4E4E4E4E4E5E5
E5E5E5E6E6E6E6E6E7E7E7E7E7E8E8E8E8E9E9E9E9E9EAEAEAEAEAEBEBEBEBEBECECECECECEDEDED
EDEEEEEEEEEEEFEFEFEFEFF0F0F0F0F0F1F1F1F1F1F2F2F2F2F3F3F3F3F3F4F4F4F4F4F5F5F5F5F5
F6F6F6F6F6F7F7F7F7F8F8F8F8F8F9F9F9F9F9FAFAFAFAFAFBFBFBFBFBFCFCFCFCFDFDFDFDFDFEFE
FEFEFEFFFFFF
>
0
1 %_Br
<
E6E4E3E2E1E0DFDEDDDCDBDAD9D8D7D6D5D4D3D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1C0BFBE
BDBCBBBAB9B8B7B6B5B4B3B2B1B0AFAEADACABAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A99989796
9594939291908F8E8D8C8B8A898887868584838281807F7E7D7C7B7A797877767574737271706F6E
6D6C6B6A696867666564636261605F5E5D5C5B5A595857565554535251504F4E4D4C4B4A49484746
4544434241403F3E3D3C3B3A393837363534333231302F2E2D2C2B2A292827262524232221201F1E
1D1C1B1A191817161514131211100F0E0D0C0B0A09080706050403020100
>
<
E6E6E6E6E6E6E6E6E6E7E7E7E7E7E7E7E7E7E8E8E8E8E8E8E8E8E8E9E9E9E9E9E9E9E9E9EAEAEAEA
EAEAEAEAEAEBEBEBEBEBEBEBEBEBECECECECECECECECECEDEDEDEDEDEDEDEDEDEEEEEEEEEEEEEEEE
EEEFEFEFEFEFEFEFEFEFF0F0F0F0F0F0F0F0F0F1F1F1F1F1F1F1F1F1F2F2F2F2F2F2F2F2F2F3F3F3
F3F3F3F3F3F3F4F4F4F4F4F4F4F4F4F5F5F5F5F5F5F5F5F5F6F6F6F6F6F6F6F6F6F7F7F7F7F7F7F7
F7F7F8F8F8F8F8F8F8F8F8F9F9F9F9F9F9F9F9F9FAFAFAFAFAFAFAFAFAFBFBFBFBFBFBFBFBFBFCFC
FCFCFCFCFCFCFCFDFDFDFDFDFDFDFDFDFEFEFEFEFEFEFEFEFEFFFFFFFFFF
>
<
00010203040405060708090A0B0C0C0D0E0F10111213141415161718191A1B1C1D1D1E1F20212223
242525262728292A2B2C2D2D2E2F30313233343535363738393A3B3C3D3D3E3F4041424344454546
4748494A4B4C4D4E4E4F50515253545556565758595A5B5C5D5E5E5F60616263646566666768696A
6B6C6D6E6E6F70717273747576767778797A7B7C7D7E7E7F80818283848586878788898A8B8C8D8E
8F8F90919293949596979798999A9B9C9D9E9F9FA0A1A2A3A4A5A6A7A7A8A9AAABACADAEAFAFB0B1
B2B3B4B5B6B7B8B8B9BABBBCBDBEBFC0C0C1C2C3C4C5C6C7C8C8C9CACBCC
>
0
1 %_Br
[
0 0.04 1 0 1 50 100 %_BS
%_0 0.04 1 0 1 50 100 Bs
0 1 0.8 0 1 50 50 %_BS
%_0 1 0.8 0 1 50 50 Bs
0.9 0.9 0 0 1 50 0 %_BS
%_0.9 0.9 0 0 1 50 0 Bs
BD
%AI5_EndGradient
%AI5_BeginGradient: (Rainbow)
(Rainbow) 0 6 Bd
[
<
FFFEFDFCFBFAF9F8F7F6F5F4F3F2F1F0EFEEEDECEBEAE9E8E7E6E5E4E3E2E1E0DFDEDDDCDBDAD9D8
D7D6D5D4D3D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1C0BFBEBDBCBBBAB9B8B7B6B5B4B3B2B1B0
AFAEADACABAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A999897969594939291908F8E8D8C8B8A8988
87868584838281807F7E7D7C7B7A797877767574737271706F6E6D6C6B6A69686766656463626160
5F5E5D5C5B5A595857565554535251504F4E4D4C4B4A494847464544434241403F3E3D3C3B3A3938
37363534333231302F2E2D2C2B2A292827262524232221201F1E1D1C1B1A19181716151413121110
0F0E0D0C0B0A09080706050403020100
>
1
0
0
1 %_Br
1
<
0708090A0B0C0D0E0F101112131415161718191A1B1C1D1E1F202122232425262728292A2B2C2D2E
2F303132333435363738393A3B3C3D3E3F404142434445464748494A4B4C4D4E4F50515253545556
5758595A5B5C5D5E5F606162636465666768696A6B6C6D6E6F707172737475767778797A7B7C7D7E
7F808182838485868788898A8B8C8D8E8F909192939495969798999A9B9C9D9E9FA0A1A2A3A4A5A6
A7A8A9AAABACADAEAFB0B1B2B3B4B5B6B7B8B9BABBBCBDBEBFC0C1C2C3C4C5C6C7C8C9CACBCCCDCE
CFD0D1D2D3D4D5D6D7D8D9DADBDCDDDEDFE0E1E2E3E4E5E6E7E8E9EAEBECEDEEEFF0F1F2F3F4F5F6
F7F8F9FAFBFCFDFEFF
>
0
0
1 %_Br
1
<
00000000000000000000000000000000000001010101010101010101010101010101010101010101
01010101010101010101010101010202020202020202020202020202020202020202020202020202
02020202020202020202030303030303030303030303030303030303030303030303030303030303
03030303030304040404040404040404040404040404040404040404040404040404040404040404
04040505050505050505050505050505050505050505050505050505050505050505050505050606
06060606060606060606060606060606060606060606060606060606060606060607070707070707
07070707070707070707070707070707
>
<
FFFEFDFCFBFAF9F8F7F6F5F4F3F2F1F0EFEEEDECEBEAE9E8E7E6E5E4E3E2E1E0DFDEDDDCDBDAD9D8
D7D6D5D4D3D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1C0BFBEBDBCBBBAB9B8B7B6B5B4B3B2B1B0
AFAEADACABAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A999897969594939291908F8E8D8C8B8A8988
87868584838281807F7E7D7C7B7A797877767574737271706F6E6D6C6B6A69686766656463626160
5F5E5D5C5B5A595857565554535251504F4E4D4C4B4A494847464544434241403F3E3D3C3B3A3938
37363534333231302F2E2D2C2B2A292827262524232221201F1E1D1C1B1A19181716151413121110
0F0E0D0C0B0A09080706050403020100
>
0
1 %_Br
<
000102030405060708090A0B0C0D0E0F101112131415161718191A1B1C1D1E1F2021222324252627
28292A2B2C2D2E2F303132333435363738393A3B3C3D3E3F404142434445464748494A4B4C4D4E4F
505152535455565758595A5B5C5D5E5F606162636465666768696A6B6C6D6E6F7071727374757677
78797A7B7C7D7E7F808182838485868788898A8B8C8D8E8F909192939495969798999A9B9C9D9E9F
A0A1A2A3A4A5A6A7A8A9AAABACADAEAFB0B1B2B3B4B5B6B7B8B9BABBBCBDBEBFC0C1C2C3C4C5C6C7
C8C9CACBCCCDCECFD0D1D2D3D4D5D6D7D8D9DADBDCDDDEDFE0E1E2E3E4E5E6E7E8E9EAEBECEDEEEF
F0F1F2F3F4F5F6F7F8F9FAFBFCFDFEFF
>
0
1
0
1 %_Br
0
<
FFFEFDFCFBFAF9F8F7F6F5F4F3F2F1F0EFEEEDECEBEAE9E8E7E6E5E4E3E2E1E0DFDEDDDCDBDAD9D8
D7D6D5D4D3D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1C0BFBEBDBCBBBAB9B8B7B6B5B4B3B2B1B0
AFAEADACABAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A999897969594939291908F8E8D8C8B8A8988
87868584838281807F7E7D7C7B7A797877767574737271706F6E6D6C6B6A69686766656463626160
5F5E5D5C5B5A595857565554535251504F4E4D4C4B4A494847464544434241403F3E3D3C3B3A3938
37363534333231302F2E2D2C2B2A292827262524232221201F1E1D1C1B1A19181716151413121110
0F0E0D0C0B0A09080706050403020100
>
1
0
1 %_Br
[
0 1 0 0 1 50 100 %_BS
%_0 1 0 0 1 50 100 Bs
1 1 0 0 1 50 80 %_BS
%_1 1 0 0 1 50 80 Bs
1 0.0279 0 0 1 50 60 %_BS
%_1 0.0279 0 0 1 50 60 Bs
1 0 1 0 1 50 40 %_BS
%_1 0 1 0 1 50 40 Bs
0 0 1 0 1 50 20 %_BS
%_0 0 1 0 1 50 20 Bs
0 1 1 0 1 50 0 %_BS
%_0 1 1 0 1 50 0 Bs
BD
%AI5_EndGradient
%AI5_BeginGradient: (Steel Bar)
(Steel Bar) 0 3 Bd
[
<
FFFEFDFCFBFAF9F8F7F6F5F4F3F2F1F0EFEEEDECEBEAE9E8E7E6E5E4E3E2E1E0DFDEDDDCDBDAD9D8
D7D6D5D4D3D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1C0BFBEBDBCBBBAB9B8B7B6B5B4B3B2B1B0
AFAEADACABAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A999897969594939291908F8E8D8C8B8A8988
87868584838281807F7E7D7C7B7A797877767574737271706F6E6D6C6B6A69686766656463626160
5F5E5D5C5B5A595857565554535251504F4E4D4C4B4A494847464544434241403F3E3D3C3B3A3938
37363534333231302F2E2D2C2B2A292827262524232221201F1E1D1C1B1A19181716151413121110
0F0E0D0C0B0A09080706050403020100
>
0 %_Br
<
000102030405060708090A0B0C0D0E0F101112131415161718191A1B1C1D1E1F2021222324252627
28292A2B2C2D2E2F303132333435363738393A3B3C3D3E3F404142434445464748494A4B4C4D4E4F
505152535455565758595A5B5C5D5E5F606162636465666768696A6B6C6D6E6F7071727374757677
78797A7B7C7D7E7F808182838485868788898A8B8C8D8E8F909192939495969798999A9B9C9D9E9F
A0A1A2A3A4A5A6A7A8A9AAABACADAEAFB0B1B2B3B4B5B6B7B8B9BABBBCBDBEBFC0C1C2C3C4C5C6C7
C8C9CACBCCCDCECFD0D1D2D3D4D5D6D7D8D9DADBDCDDDEDFE0E1E2E3E4E5E6E7E8E9EAEBECEDEEEF
F0F1F2F3F4F5F6F7F8F9FAFBFCFDFEFF
>
0 %_Br
[
0 0 50 100 %_BS
%_0 0 50 100 Bs
1 0 50 70 %_BS
%_1 0 50 70 Bs
0 0 50 0 %_BS
%_0 0 50 0 Bs
BD
%AI5_EndGradient
%AI5_BeginGradient: (Yellow & Orange Radial)
(Yellow & Orange Radial) 1 2 Bd
[
0
<
0001010203040506060708090A0B0C0C0D0E0F10111213131415161718191A1B1C1D1D1E1F202122
232425262728292A2B2B2C2D2E2F303132333435363738393A3B3C3D3E3E3F404142434445464748
494A4B4C4D4E4F505152535455565758595A5B5C5D5E5F60606162636465666768696A6B6C6D6E6F
707172737475767778797A7B7C7D7E7F808182838485868788898A8B8C
>
<
FFFFFFFFFEFEFEFEFEFEFEFDFDFDFDFDFDFCFCFCFCFCFCFBFBFBFBFBFBFAFAFAFAFAFAF9F9F9F9F9
F9F8F8F8F8F8F8F7F7F7F7F7F7F6F6F6F6F6F6F5F5F5F5F5F5F4F4F4F4F4F3F3F3F3F3F3F2F2F2F2
F2F2F1F1F1F1F1F0F0F0F0F0F0EFEFEFEFEFEFEEEEEEEEEEEDEDEDEDEDEDECECECECECEBEBEBEBEB
EBEAEAEAEAEAE9E9E9E9E9E9E8E8E8E8E8E8E7E7E7E7E7E6E6E6E6E6E6
>
0
1 %_Br
[
0 0 1 0 1 52 19 %_BS
%_0 0 1 0 1 52 19 Bs
0 0.55 0.9 0 1 50 100 %_BS
%_0 0.55 0.9 0 1 50 100 Bs
BD
%AI5_EndGradient
%AI5_BeginGradient: (Yellow & Purple Radial)
(Yellow & Purple Radial) 1 2 Bd
[
<
000102030405060708090A0B0C0D0E0F101112131415161718191A1B1C1D1E1F2021222324252627
28292A2B2C2D2E2F303132333435363738393A3B3C3D3E3F404142434445464748494A4B4C4D4E4F
505152535455565758595A5B5C5D5E5F606162636465666768696A6B6C6D6E6F7071727374757677
78797A7B7C7D7E7F808182838485868788898A8B8C8D8E8F909192939495969798999A9B9C9D9E9F
A0A1A2A3A4A5A6A7A8A9AAABACADAEAFB0B1B2B3B4B5B6B7B8B9BABBBCBDBEBFC0C1C2C3C4C5C6C7
C8C9CACBCCCDCECFD0D1D2D3D4D5D6D7D8D9DADBDCDDDEDFE0E1E2E3E4E5E6E7E8E9EAEBECEDEEEF
F0F1F2F3F4F5F6F7F8F9FAFBFCFDFEFF
>
<
1415161718191A1B1C1D1E1F1F202122232425262728292A2A2B2C2D2E2F30313233343536363738
393A3B3C3D3E3F40414142434445464748494A4B4C4D4D4E4F50515253545556575858595A5B5C5D
5E5F60616263646465666768696A6B6C6D6E6F6F707172737475767778797A7B7B7C7D7E7F808182
83848586868788898A8B8C8D8E8F90919292939495969798999A9B9C9D9D9E9FA0A1A2A3A4A5A6A7
A8A9A9AAABACADAEAFB0B1B2B3B4B4B5B6B7B8B9BABBBCBDBEBFC0C0C1C2C3C4C5C6C7C8C9CACBCB
CCCDCECFD0D1D2D3D4D5D6D7D7D8D9DADBDCDDDEDFE0E1E2E2E3E4E5E6E7E8E9EAEBECEDEEEEEFF0
F1F2F3F4F5F6F7F8F9F9FAFBFCFDFEFF
>
<
ABAAAAA9A8A8A7A6A5A5A4A3A3A2A1A1A09F9F9E9D9D9C9B9B9A9999989797969595949393929191
908F8F8E8D8D8C8B8B8A8989888787868585848383828181807F7F7E7D7D7C7B7B7A797978777776
7575747373727171706F6F6E6D6D6C6B6B6A6969686767666564646362626160605F5E5E5D5C5C5B
5A5A5958585756565554545352525150504F4E4E4D4C4C4B4A4A4948484746464544444342424140
403F3E3E3D3C3C3B3A3A3938383736363534343332323130302F2E2E2D2C2C2B2A2A292828272626
25242423222121201F1F1E1D1D1C1B1B1A1919181717161515141313121111100F0F0E0D0D0C0B0B
0A090908070706050504030302010100
>
0
1 %_Br
[
0 0.08 0.67 0 1 50 14 %_BS
%_0 0.08 0.67 0 1 50 14 Bs
1 1 0 0 1 50 100 %_BS
%_1 1 0 0 1 50 100 Bs
BD
%AI5_EndGradient
%AI5_End_NonPrinting--
%AI5_Begin_NonPrinting
Np
%AI5_End_NonPrinting--
%AI5_BeginPalette
0 0 Pb
1 1 1 1 ([Registration]) 0 Xs
([Registration]) Pc
1 g
(K=0) Pc
0 g
(K=100) Pc
0 0 0 0 k
(C=0 M=0 Y=0 K=0) Pc
0.75 g
(K=25) Pc
0.5 g
(K=50) Pc
0.25 g
(K=75) Pc
0 g
(K=100) Pc
Bb
2 (Black & White) 0 0 0 1 1 0 0 1 0 0 Bg
0 BB
(Black & White) Pc
0.25 0 0 0 k
(C=25 M=0 Y=0 K=0) Pc
0.5 0 0 0 k
(C=50 M=0 Y=0 K=0) Pc
0.75 0 0 0 k
(C=75 M=0 Y=0 K=0) Pc
1 0 0 0 k
(C=100 M=0 Y=0 K=0) Pc
0.25 0.25 0 0 k
(C=25 M=25 Y=0 K=0) Pc
0.5 0.5 0 0 k
(C=50 M=50 Y=0 K=0) Pc
0.75 0.75 0 0 k
(C=75 M=75 Y=0 K=0) Pc
1 1 0 0 k
(C=100 M=100 Y=0 K=0) Pc
Bb
2 (Pink, Yellow, Green) 0 0 0 1 1 0 0 1 0 0 Bg
0 BB
(Pink, Yellow, Green) Pc
0 0.25 0 0 k
(C=0 M=25 Y=0 K=0) Pc
0 0.5 0 0 k
(C=0 M=50 Y=0 K=0) Pc
0 0.75 0 0 k
(C=0 M=75 Y=0 K=0) Pc
0 1 0 0 k
(C=0 M=100 Y=0 K=0) Pc
0 0.25 0.25 0 k
(C=0 M=25 Y=25 K=0) Pc
0 0.5 0.5 0 k
(C=0 M=50 Y=50 K=0) Pc
0 0.75 0.75 0 k
(C=0 M=75 Y=75 K=0) Pc
0 1 1 0 k
(C=0 M=100 Y=100 K=0) Pc
Bb
0 0 0 0 Bh
2 (Yellow & Purple Radial) 0 0 0 1 1 0 0 1 0 0 Bg
0 BB
(Yellow & Purple Radial) Pc
0 0 0.25 0 k
(C=0 M=0 Y=25 K=0) Pc
0 0 0.5 0 k
(C=0 M=0 Y=50 K=0) Pc
0 0 0.75 0 k
(C=0 M=0 Y=75 K=0) Pc
0 0 1 0 k
(C=0 M=0 Y=100 K=0) Pc
0.25 0 0.25 0 k
(C=25 M=0 Y=25 K=0) Pc
0.5 0 0.5 0 k
(C=50 M=0 Y=50 K=0) Pc
0.75 0 0.75 0 k
(C=75 M=0 Y=75 K=0) Pc
1 0 1 0 k
(C=100 M=0 Y=100 K=0) Pc
Bb
2 (Rainbow) 0 0 0 1 1 0 0 1 0 0 Bg
0 BB
(Rainbow) Pc
0.25 0.125 0 0 k
(C=25 M=13 Y=0 K=0) Pc
0.5 0.25 0 0 k
(C=50 M=25 Y=0 K=0) Pc
0.75 0.375 0 0 k
(C=75 M=38 Y=0 K=0) Pc
1 0.5 0 0 k
(C=100 M=50 Y=0 K=0) Pc
0.125 0.25 0 0 k
(C=13 M=25 Y=0 K=0) Pc
0.25 0.5 0 0 k
(C=25 M=50 Y=0 K=0) Pc
0.375 0.75 0 0 k
(C=38 M=75 Y=0 K=0) Pc
0.5 1 0 0 k
(C=50 M=100 Y=0 K=0) Pc
Bb
2 (Steel Bar) 0 0 0 1 1 0 0 1 0 0 Bg
0 BB
(Steel Bar) Pc
0 0.25 0.125 0 k
(C=0 M=25 Y=13 K=0) Pc
0 0.5 0.25 0 k
(C=0 M=50 Y=25 K=0) Pc
0 0.75 0.375 0 k
(C=0 M=75 Y=38 K=0) Pc
0 1 0.5 0 k
(C=0 M=100 Y=50 K=0) Pc
0 0.125 0.25 0 k
(C=0 M=13 Y=25 K=0) Pc
0 0.25 0.5 0 k
(C=0 M=25 Y=50 K=0) Pc
0 0.375 0.75 0 k
(C=0 M=38 Y=75 K=0) Pc
0 0.5 1 0 k
(C=0 M=50 Y=100 K=0) Pc
Bb
2 (Purple, Red & Yellow) 0 0 0 1 1 0 0 1 0 0 Bg
0 BB
(Purple, Red & Yellow) Pc
0.125 0 0.25 0 k
(C=13 M=0 Y=25 K=0) Pc
0.25 0 0.5 0 k
(C=25 M=0 Y=50 K=0) Pc
0.375 0 0.75 0 k
(C=38 M=0 Y=75 K=0) Pc
0.5 0 1 0 k
(C=50 M=0 Y=100 K=0) Pc
0.25 0 0.125 0 k
(C=25 M=0 Y=13 K=0) Pc
0.5 0 0.25 0 k
(C=50 M=0 Y=25 K=0) Pc
0.75 0 0.375 0 k
(C=75 M=0 Y=38 K=0) Pc
1 0 0.5 0 k
(C=100 M=0 Y=50 K=0) Pc
Bb
2 (Green & Blue) 0 0 0 1 1 0 0 1 0 0 Bg
0 BB
(Green & Blue) Pc
0.25 0.125 0.125 0 k
(C=25 M=13 Y=13 K=0) Pc
0.5 0.25 0.25 0 k
(C=50 M=25 Y=25 K=0) Pc
0.75 0.375 0.375 0 k
(C=75 M=38 Y=38 K=0) Pc
1 0.5 0.5 0 k
(C=100 M=50 Y=50 K=0) Pc
0.25 0.25 0.125 0 k
(C=25 M=25 Y=13 K=0) Pc
0.5 0.5 0.25 0 k
(C=50 M=50 Y=25 K=0) Pc
0.75 0.75 0.375 0 k
(C=75 M=75 Y=38 K=0) Pc
1 1 0.5 0 k
(C=100 M=100 Y=50 K=0) Pc
Bb
0 0 0 0 Bh
2 (Yellow & Orange Radial) 0 0 0 1 1 0 0 1 0 0 Bg
0 BB
(Yellow & Orange Radial) Pc
0.125 0.25 0.125 0 k
(C=13 M=25 Y=13 K=0) Pc
0.25 0.5 0.25 0 k
(C=25 M=50 Y=25 K=0) Pc
0.375 0.75 0.375 0 k
(C=38 M=75 Y=38 K=0) Pc
0.5 1 0.5 0 k
(C=50 M=100 Y=50 K=0) Pc
0.125 0.25 0.25 0 k
(C=13 M=25 Y=25 K=0) Pc
0.25 0.5 0.5 0 k
(C=25 M=50 Y=50 K=0) Pc
0.375 0.75 0.75 0 k
(C=38 M=75 Y=75 K=0) Pc
0.5 1 1 0 k
(C=50 M=100 Y=100 K=0) Pc
0 0 0 0 k
(C=0 M=0 Y=0 K=0) Pc
0.125 0.125 0.25 0 k
(C=13 M=13 Y=25 K=0) Pc
0.25 0.25 0.5 0 k
(C=25 M=25 Y=50 K=0) Pc
0.375 0.375 0.75 0 k
(C=38 M=38 Y=75 K=0) Pc
0.5 0.5 1 0 k
(C=50 M=50 Y=100 K=0) Pc
0.25 0.125 0.25 0 k
(C=25 M=13 Y=25 K=0) Pc
0.5 0.25 0.5 0 k
(C=50 M=25 Y=50 K=0) Pc
0.75 0.375 0.75 0 k
(C=75 M=38 Y=75 K=0) Pc
1 0.5 1 0 k
(C=100 M=50 Y=100 K=0) Pc
0 0.09 0.65 0 (PANTONE 128 CV) 0 x
(PANTONE 128 CV) Pc
0 0.15 0.76 0 (PANTONE 129 CV) 0 x
(PANTONE 129 CV) Pc
0 0.27 1 0 (PANTONE 130 CV) 0 x
(PANTONE 130 CV) Pc
0 0.27 1 0.09 (PANTONE 131 CV) 0 x
(PANTONE 131 CV) Pc
0 0.76 0.56 0.56 (PANTONE 195 CV) 0 x
(PANTONE 195 CV) Pc
1 0 0.6 0.72 (PANTONE 3308 CV) 0 x
(PANTONE 3308 CV) Pc
PB
%AI5_EndPalette
%AI5_Begin_NonPrinting
Np
%AI8_PluginGroupInfo
(Adobe Calligraphic Brush Tool) (Adobe Calligraphic Brush Plugin) (Calligraphic Brush Tool)
%AI8_PluginGroupInfo
(Adobe PatternOnPath Brush Tool) (Adobe Pattern Brush Plugin) (Art Brush Tool)
%AI8_PluginGroupInfo
(Adobe ArtOnPath Brush Tool) (Adobe Art Brush Plugin) (Art Brush Tool)
%AI8_PluginGroupInfo
(Adobe Scatter Brush Tool) (Adobe Scatter Brush Plugin) (Scatter Brush Tool)
%AI8_PluginGroupInfo
(Adobe Path Blends) (Adobe Blends Plugin) (Live Blends)
%AI5_End_NonPrinting--
%%EndSetup
%AI5_BeginLayer
1 1 1 1 0 0 1 0 79 128 255 0 100 Lb
(Layer 1) Ln
0 A
u
*u
0 O
1 0 0.6 0.72 (PANTONE 3308 CV) 0 x
0 J 0 j 1 w 4 M []0 d
0 XR
166.4443 447.5986 m
172.9292 447.5986 177.3223 446.376 180.8784 443.5229 c
189.2456 437.0024 194.0566 421.6519 194.0566 402.3618 c
194.0566 383.0723 189.0366 367.1777 180.8784 360.9287 c
177.1128 358.0762 173.1382 356.9893 166.4443 356.9893 c
147.8271 356.9893 L
154.73 359.9775 L
154.73 444.4741 L
147.8271 447.5986 L
166.4443 447.5986 l
f
1 D
166.4443 359.4346 m
172.7202 359.4346 176.0669 360.793 177.9497 364.1895 c
178.7861 365.5479 179.4141 367.4492 179.8325 370.5732 c
180.8784 377.0947 181.5059 389.7275 181.5059 401.2749 c
181.5059 410.6484 181.0874 423.146 180.2505 431.1611 c
179.2046 441.4854 175.8579 445.0171 166.4443 445.1533 C
166.4443 359.4346 l
f
*U
*u
0 D
216.5708 370.8584 m
213.2144 370.8584 210.2954 372.9434 207.96 377.1143 c
204.3115 383.4639 201.9766 393.416 201.9766 403.0835 c
201.9766 412.9404 204.1655 422.7026 208.106 429.1475 c
210.5869 433.3174 213.3604 435.3081 216.7168 435.3081 c
225.1816 435.3081 231.8955 421.0913 231.8955 403.0835 c
231.8955 385.1699 225.0356 370.8584 216.5708 370.8584 c
f
1 D
222.5547 418.3428 m
221.8252 429.9058 220.5117 433.6021 216.7168 433.6021 c
214.8198 433.6021 213.3604 432.4644 212.6304 430.3794 c
211.4629 426.6831 210.5869 417.4897 210.7329 408.2959 c
210.7329 403.0835 L
210.7329 391.9941 211.0249 385.4551 211.9009 379.7676 c
212.6304 374.6494 213.9438 372.5645 216.7168 372.5645 c
218.7603 372.5645 219.9277 373.6064 220.8032 375.9766 c
221.2412 377.0186 221.5332 378.7246 221.9712 380.9043 c
222.4087 383.748 222.7007 387.2559 222.8467 391.3311 c
222.9927 395.8799 223.1387 399.3867 223.1387 402.6094 c
223.1387 406.4004 222.8467 414.6465 222.5547 418.3428 c
f
*U
*u
0 D
263.9092 394.459 m
263.9092 432.4644 L
258.6553 434.7393 L
272.0825 434.7393 L
267.1201 432.4644 L
267.1201 371.5225 L
263.6172 371.5225 L
245.082 423.271 L
245.082 373.6064 L
249.7524 371.5225 L
236.9092 371.5225 L
241.8716 373.6064 L
241.8716 432.4644 L
236.9092 434.7393 L
249.6064 434.7393 L
263.9092 394.459 l
f
*U
*u
292.5938 370.8584 m
289.2368 370.8584 286.3179 372.9434 283.9829 377.1143 c
280.334 383.4639 277.999 393.416 277.999 403.0835 c
277.999 412.9404 280.1885 422.7026 284.1289 429.1475 c
286.6099 433.3174 289.3828 435.3081 292.7397 435.3081 c
301.2046 435.3081 307.918 421.0913 307.918 403.0835 c
307.918 385.1699 301.0586 370.8584 292.5938 370.8584 c
f
1 D
298.5776 418.3428 m
297.8477 429.9058 296.5342 433.6021 292.7397 433.6021 c
290.8423 433.6021 289.3828 432.4644 288.6533 430.3794 c
287.4854 426.6831 286.6099 417.4897 286.7559 408.2959 c
286.7559 403.0835 L
286.7559 391.9941 287.0479 385.4551 287.9233 379.7676 c
288.6533 374.6494 289.9668 372.5645 292.7397 372.5645 c
294.7827 372.5645 295.9507 373.6064 296.8262 375.9766 c
297.2642 377.0186 297.5562 378.7246 297.9937 380.9043 c
298.4316 383.748 298.7236 387.2559 298.8696 391.3311 c
299.0156 395.8799 299.1611 399.3867 299.1611 402.6094 c
299.1611 406.4004 298.8696 414.6465 298.5776 418.3428 c
f
*U
*u
0 D
340.8535 432.4644 m
328.4482 371.1426 L
325.5293 371.1426 L
313.707 432.4644 L
308.7461 434.7393 L
326.8428 434.7393 L
322.0273 432.4644 L
329.1777 391.2354 L
337.6436 432.4644 L
332.8271 434.7393 L
345.6699 434.7393 L
340.8535 432.4644 l
f
*U
*u
373.9385 373.6064 m
378.7539 371.5225 L
360.8027 371.5225 L
365.6191 373.6064 L
361.5332 392.9414 L
352.3389 392.9414 L
348.1064 373.6064 L
352.9219 371.5225 L
339.9336 371.5225 L
344.749 373.6064 L
358.0303 435.1187 L
360.6572 435.1187 L
373.9385 373.6064 l
f
1 D
352.6309 394.6475 m
361.0957 394.6475 L
357.0088 418.3428 L
352.6309 394.6475 l
f
*U
*u
0 D
405.6006 394.459 m
405.6006 432.4644 L
400.3467 434.7393 L
413.7734 434.7393 L
408.8115 432.4644 L
408.8115 371.5225 L
405.3086 371.5225 L
386.7734 423.271 L
386.7734 373.6064 L
391.4434 371.5225 L
378.6006 371.5225 L
383.5625 373.6064 L
383.5625 432.4644 L
378.6006 434.7393 L
391.2979 434.7393 L
405.6006 394.459 l
f
*U
*u
421.748 453.7559 m
415.7646 442.7144 L
415.4727 442.7144 L
415.4727 453.7559 L
421.748 453.7559 l
f
*U
*u
451.2344 419.4785 m
450.8154 419.4785 L
444.959 435.5083 L
443.7031 438.6328 442.8672 440.6704 442.2393 442.0288 c
440.7754 444.4741 438.4736 445.8325 435.7539 445.8325 c
430.7344 445.8325 428.0146 441.7568 428.0146 433.7422 c
428.0146 427.6289 429.2695 423.0103 431.9893 418.9351 c
433.6621 416.4897 435.5449 414.3159 437.8457 412.2783 c
438.6836 411.5991 439.3105 411.0557 441.8203 408.8823 c
442.8672 408.0674 443.9121 407.2524 444.54 406.5732 c
453.5352 399.1016 456.6729 392.7168 456.6729 383.207 c
456.6729 368.2646 448.5146 356.0391 438.4736 356.0391 c
433.4531 356.0391 429.6875 358.2119 426.7598 362.8311 c
421.5293 355.7666 L
421.5293 389.5918 L
421.9482 389.5918 L
428.2236 369.3516 L
430.5254 361.8799 433.6621 358.6191 438.6836 358.6191 c
444.54 358.6191 447.4688 364.0527 447.4688 375.0566 c
447.4688 385.5176 444.54 391.4941 435.5449 399.373 c
427.5957 406.1655 426.1318 407.6597 424.04 411.0557 c
421.3203 415.2671 420.0654 419.8857 420.0654 425.7271 c
420.0654 439.04 426.7598 448.4136 435.9639 448.4136 c
440.5654 448.4136 443.7031 446.6475 446.4229 442.4365 c
451.2344 448.8213 L
451.2344 419.4785 l
f
*U
U
1 Ap
0 0.76 0.56 0.56 (PANTONE 195 CV) 0 x
397.0527 338.9688 m
402.498 338.9688 406.9111 343.3818 406.9111 348.8262 C
406.9111 348.8262 L
406.9111 354.2715 402.498 358.6846 397.0527 358.6846 C
206.1357 358.6846 L
200.6909 358.6846 196.2773 354.2715 196.2773 348.8262 C
196.2773 348.8262 L
196.2773 343.3818 200.6909 338.9688 206.1357 338.9688 C
397.0527 338.9688 L
f
u
*u
0 Ap
1 g
208.4253 347.8027 m
208.5791 347.7266 L
208.5488 347.6494 208.5488 347.541 208.5488 347.4033 c
208.5488 346.9883 210.1943 346.2959 211.7939 346.2959 c
213.332 346.2959 214.0244 346.665 214.0244 347.3418 c
214.0244 348.4805 207.6875 347.2188 207.6875 350.1875 c
207.6875 351.7246 209.1636 352.7861 211.4248 352.7861 c
213.5322 352.7861 215.0547 352.1406 215.4702 352.1406 c
215.6699 352.1406 215.7778 352.248 215.8853 352.3711 c
216.0542 352.3096 L
214.9932 350.1719 L
214.8086 350.2646 L
214.8086 350.4336 L
214.8086 350.8184 213.0552 351.248 211.6094 351.248 c
210.271 351.248 209.8096 350.8789 209.8096 350.5254 c
209.8096 349.1563 216.1777 350.833 216.1777 347.2949 c
216.1777 345.9727 215.1777 344.5117 211.8403 344.5117 c
209.2715 344.5117 208.1333 345.2188 207.7793 345.2188 c
207.6563 345.2188 207.564 345.1113 207.4717 345.0186 c
207.2876 345.0654 L
208.4253 347.8027 l
f
*U
*u
221.1011 344.6035 m
221.1011 344.7891 L
221.4858 344.8193 221.5317 344.9268 221.5317 345.0654 c
221.5317 350.8184 L
218.8862 350.8184 L
218.7173 350.8184 218.6558 350.7402 218.6094 350.3867 c
218.4248 350.3867 L
218.4248 353.125 L
218.6094 353.125 L
218.6558 352.7715 218.7173 352.6943 218.8862 352.6943 c
226.4844 352.6943 L
226.6538 352.6943 226.7153 352.7715 226.7612 353.125 c
226.9458 353.125 L
226.9458 350.3867 L
226.7612 350.3867 L
226.7153 350.7402 226.6538 350.8184 226.4844 350.8184 c
223.8389 350.8184 L
223.8389 345.0654 L
223.8389 344.9268 223.8853 344.8193 224.2695 344.7891 c
224.2695 344.6035 L
221.1011 344.6035 l
f
*U
*u
235.9585 347.5566 m
235.7739 347.5566 L
235.7275 347.7568 235.6201 347.9102 235.3125 347.9102 c
232.4517 347.9102 L
232.4517 346.4805 L
237.3887 346.4805 L
237.5581 346.4805 237.6196 346.5566 237.6655 346.9414 c
237.8501 346.9414 L
237.8501 344.2656 L
237.6655 344.2656 L
237.6196 344.5273 237.5581 344.6035 237.3887 344.6035 c
229.7139 344.6035 L
229.7139 344.7891 L
230.0981 344.8193 230.1445 344.9268 230.1445 345.0654 c
230.1445 352.2324 L
230.1445 352.3711 230.0981 352.4785 229.7139 352.5098 c
229.7139 352.6943 L
237.3887 352.6943 L
237.5581 352.6943 237.6196 352.7715 237.6655 353.125 c
237.8501 353.125 L
237.8501 350.4482 L
237.6655 350.4482 L
237.6196 350.8018 237.5581 350.8789 237.3887 350.8789 c
232.4517 350.8789 L
232.4517 349.6025 L
235.3125 349.6025 L
235.6201 349.6025 235.7275 349.7559 235.7739 349.9561 c
235.9585 349.9561 L
235.9585 347.5566 l
f
*U
*u
243.3481 346.3574 m
242.9482 345.2344 242.856 345.0352 242.856 344.9424 c
242.856 344.8496 242.9175 344.7891 243.1328 344.7891 c
243.1328 344.6035 L
240.4102 344.6035 L
240.4102 344.7891 L
240.6255 344.835 240.7178 344.8965 240.8101 345.1426 c
240.9487 345.4961 243.5479 352.2637 243.5479 352.3564 c
243.5479 352.4639 243.3789 352.4941 243.2402 352.5098 c
243.2402 352.6943 L
247.2549 352.6943 L
247.2549 352.5098 L
247.0854 352.4941 246.978 352.4639 246.978 352.3096 c
246.978 352.1865 248.8696 347.5879 249.8232 345.25 c
249.9771 344.8809 250.0693 344.7891 250.2539 344.7891 c
250.2539 344.6035 L
247.2241 344.6035 L
247.2241 344.7891 L
247.4395 344.8037 247.5161 344.8809 247.5161 344.9727 c
247.5161 345.0352 247.0547 346.1572 246.9932 346.3574 C
243.3481 346.3574 l
f
1 D
243.7324 347.5879 m
246.5933 347.5879 L
245.1016 351.248 L
243.7324 347.5879 l
f
*U
*u
0 D
258.6167 344.6035 m
258.6167 344.7891 L
258.8013 344.7891 258.9087 344.7891 258.9087 344.9883 c
258.9087 345.1729 257.0171 347.8799 256.7866 348.2646 c
255.2793 346.9111 L
255.2793 345.0654 L
255.2793 344.9268 255.3252 344.8193 255.7095 344.7891 c
255.7095 344.6035 L
252.5415 344.6035 L
252.5415 344.7891 L
252.9258 344.8193 252.9717 344.9268 252.9717 345.0654 c
252.9717 352.2324 L
252.9717 352.3711 252.9258 352.4785 252.5415 352.5098 c
252.5415 352.6943 L
255.7095 352.6943 L
255.7095 352.5098 L
255.3252 352.4785 255.2793 352.3711 255.2793 352.2324 c
255.2793 349.4648 L
255.3867 349.4648 L
256.6172 350.6641 258.4014 352.1406 258.4014 352.3096 c
258.4014 352.4941 258.2939 352.4941 258.1245 352.5098 c
258.1245 352.6943 L
262.0313 352.6943 L
262.0313 352.5098 L
261.6313 352.4785 261.5542 352.3564 261.1699 352.0176 c
258.5088 349.7256 L
261.6465 345.0352 L
261.8159 344.7891 261.939 344.7891 262.1387 344.7891 c
262.1387 344.6035 L
258.6167 344.6035 l
f
*U
*u
279.1006 347.957 m
278.9775 347.957 L
278.9468 348.0957 278.8696 348.1729 278.6392 348.1729 c
278.2393 348.1729 277.7007 347.3262 277.5625 346.9727 c
277.7778 346.7568 278.3315 346.4492 278.6392 346.4492 c
278.7773 346.4492 278.8853 346.5264 278.916 346.665 c
279.1006 346.665 L
279.1006 344.5117 L
278.1313 344.4961 276.978 344.7109 276.3013 345.4492 c
275.332 344.7266 274.3633 344.5117 273.1636 344.5117 c
271.6255 344.5117 269.8105 345.2813 269.8105 347.0645 c
269.8105 348.2646 270.687 349.0801 271.7485 349.4648 c
271.333 349.7871 270.9946 350.2334 270.9946 350.7715 c
270.9946 352.4023 272.5942 352.7861 273.8862 352.7861 c
275.1782 352.7861 276.6855 352.418 276.6855 350.833 c
276.6855 350.0332 276.0244 349.4951 275.3936 349.1406 c
275.7476 348.8486 276.0396 348.4648 276.332 348.1104 c
277.0396 349.1406 277.9468 350.0801 279.1006 350.6025 C
279.1006 347.957 l
f
1 D
275.2397 347.0029 m
274.9321 347.8799 274.3633 348.3564 273.5327 348.3564 c
272.7637 348.3564 272.1792 347.957 272.1792 347.2803 c
272.1792 346.6035 272.7637 346.2031 273.5327 346.2031 c
274.1323 346.2031 274.8706 346.5264 275.2397 347.0029 c
f
0 D
272.8096 350.7256 m
272.856 350.1104 273.394 349.834 273.8711 349.834 c
274.3477 349.834 274.8862 350.1104 274.9321 350.7256 c
274.8862 351.3408 274.3477 351.6182 273.8711 351.6182 c
273.394 351.6182 272.856 351.3408 272.8096 350.7256 c
f
*U
*u
295.1494 349.71 m
294.9956 349.8184 L
295.0107 349.8789 295.0264 349.9404 295.0264 350.0488 c
295.0264 350.3564 293.8418 350.7559 292.5347 350.7559 c
291.2886 350.7559 289.6738 350.2178 289.6738 348.6484 c
289.6738 347.0801 291.2886 346.542 292.5347 346.542 c
293.0728 346.542 295.1187 346.957 295.1187 347.4033 c
295.1187 347.4961 295.0571 347.5566 295.0264 347.6338 c
295.1953 347.7422 L
296.7798 345.3271 L
296.5952 345.2188 L
296.5488 345.3271 296.4873 345.3418 296.3799 345.3418 c
296.0723 345.3418 294.6416 344.5117 292.3501 344.5117 c
289.8892 344.5117 287.2744 345.8965 287.2744 348.6484 c
287.2744 351.4023 289.8892 352.7861 292.3501 352.7861 c
293.5806 352.7861 294.457 352.6328 295.0723 352.4639 c
295.6724 352.2939 295.98 352.1719 296.1338 352.1719 c
296.2261 352.1719 296.3027 352.2168 296.3643 352.2939 c
296.5337 352.248 L
295.1494 349.71 l
f
*U
*u
308.5273 345.0654 m
308.5273 344.9268 308.5732 344.8193 308.958 344.7891 c
308.958 344.6035 L
305.7896 344.6035 L
305.7896 344.7891 L
306.1743 344.8193 306.2202 344.9268 306.2202 345.0654 c
306.2202 347.9102 L
302.2212 347.9102 L
302.2212 345.0654 L
302.2212 344.9268 302.2676 344.8193 302.6519 344.7891 c
302.6519 344.6035 L
299.4834 344.6035 L
299.4834 344.7891 L
299.8682 344.8193 299.9141 344.9268 299.9141 345.0654 c
299.9141 352.2324 L
299.9141 352.3711 299.8682 352.4785 299.4834 352.5098 c
299.4834 352.6943 L
302.6519 352.6943 L
302.6519 352.5098 L
302.2676 352.4785 302.2212 352.3711 302.2212 352.2324 c
302.2212 349.7871 L
306.2202 349.7871 L
306.2202 352.2324 L
306.2202 352.3711 306.1743 352.4785 305.7896 352.5098 c
305.7896 352.6943 L
308.958 352.6943 L
308.958 352.5098 L
308.5732 352.4785 308.5273 352.3711 308.5273 352.2324 C
308.5273 345.0654 l
f
*U
*u
320.8945 348.6484 m
320.8945 345.957 318.71 344.5117 316.0957 344.5117 c
313.4805 344.5117 311.2969 345.957 311.2969 348.6484 c
311.2969 351.3408 313.4805 352.7861 316.0957 352.7861 c
318.71 352.7861 320.8945 351.3408 320.8945 348.6484 c
f
1 D
313.5732 348.6484 m
313.5732 347.2031 314.7568 346.3887 316.0957 346.3887 c
317.4336 346.3887 318.6182 347.2031 318.6182 348.6484 c
318.6182 350.0947 317.4336 350.9102 316.0957 350.9102 c
314.7568 350.9102 313.5732 350.0947 313.5732 348.6484 c
f
*U
*u
0 D
326.1387 345.0654 m
326.1387 344.9268 326.1846 344.8193 326.5693 344.7891 c
326.5693 344.6035 L
323.4014 344.6035 L
323.4014 344.7891 L
323.7852 344.8193 323.8311 344.9268 323.8311 345.0654 c
323.8311 352.2324 L
323.8311 352.3711 323.7852 352.4785 323.4014 352.5098 c
323.4014 352.6943 L
328.9072 352.6943 L
330.8457 352.6943 331.8447 351.4941 331.8447 350.125 c
331.8447 348.7568 330.8457 347.5723 328.9072 347.5723 c
326.1387 347.5723 L
326.1387 345.0654 l
f
1 D
326.1387 349.2021 m
328.4766 349.2021 L
329.3066 349.2021 329.7227 349.4795 329.7227 350.125 c
329.7227 350.7256 329.3066 350.9717 328.4766 350.9717 c
326.1387 350.9717 L
326.1387 349.2021 l
f
*U
*u
0 D
348.5371 345.0654 m
348.5371 344.9268 348.583 344.8193 348.9678 344.7891 c
348.9678 344.6035 L
345.7988 344.6035 L
345.7988 344.7891 L
346.1836 344.8193 346.2305 344.9268 346.2305 345.0654 c
346.2305 347.9102 L
342.2314 347.9102 L
342.2314 345.0654 L
342.2314 344.9268 342.2773 344.8193 342.6611 344.7891 c
342.6611 344.6035 L
339.4932 344.6035 L
339.4932 344.7891 L
339.877 344.8193 339.9238 344.9268 339.9238 345.0654 c
339.9238 352.2324 L
339.9238 352.3711 339.877 352.4785 339.4932 352.5098 c
339.4932 352.6943 L
342.6611 352.6943 L
342.6611 352.5098 L
342.2773 352.4785 342.2314 352.3711 342.2314 352.2324 c
342.2314 349.7871 L
346.2305 349.7871 L
346.2305 352.2324 L
346.2305 352.3711 346.1836 352.4785 345.7988 352.5098 c
345.7988 352.6943 L
348.9678 352.6943 L
348.9678 352.5098 L
348.583 352.4785 348.5371 352.3711 348.5371 352.2324 C
348.5371 345.0654 l
f
*U
*u
361.084 348.6484 m
361.084 345.957 358.8994 344.5117 356.2852 344.5117 c
353.6699 344.5117 351.4854 345.957 351.4854 348.6484 c
351.4854 351.3408 353.6699 352.7861 356.2852 352.7861 c
358.8994 352.7861 361.084 351.3408 361.084 348.6484 c
f
1 D
353.7617 348.6484 m
353.7617 347.2031 354.9463 346.3887 356.2852 346.3887 c
357.623 346.3887 358.8066 347.2031 358.8066 348.6484 c
358.8066 350.0947 357.623 350.9102 356.2852 350.9102 c
354.9463 350.9102 353.7617 350.0947 353.7617 348.6484 c
f
*U
*u
0 D
370.0986 352.2324 m
370.0986 352.3711 370.0518 352.4785 369.668 352.5098 c
369.668 352.6943 L
372.8359 352.6943 L
372.8359 352.5098 L
372.4521 352.4785 372.4063 352.3711 372.4063 352.2324 c
372.4063 348.1104 L
372.4063 345.4043 370.5137 344.5117 368.1602 344.5117 c
365.8066 344.5117 363.915 345.4043 363.915 348.1104 c
363.915 352.2324 L
363.915 352.3711 363.8691 352.4785 363.4854 352.5098 c
363.4854 352.6943 L
366.6533 352.6943 L
366.6533 352.5098 L
366.2686 352.4785 366.2227 352.3711 366.2227 352.2324 c
366.2227 348.1104 L
366.2227 346.9268 366.9307 346.4492 368.1602 346.4492 c
369.3906 346.4492 370.0986 346.9268 370.0986 348.1104 C
370.0986 352.2324 l
f
*U
*u
376.7393 347.8027 m
376.8926 347.7266 L
376.8613 347.6494 376.8613 347.541 376.8613 347.4033 c
376.8613 346.9883 378.5068 346.2959 380.1064 346.2959 c
381.6445 346.2959 382.3379 346.665 382.3379 347.3418 c
382.3379 348.4805 376 347.2188 376 350.1875 c
376 351.7246 377.4775 352.7861 379.7383 352.7861 c
381.8457 352.7861 383.3682 352.1406 383.7832 352.1406 c
383.9824 352.1406 384.0908 352.248 384.1982 352.3711 c
384.3682 352.3096 L
383.3066 350.1719 L
383.1221 350.2646 L
383.1221 350.4336 L
383.1221 350.8184 381.3682 351.248 379.9229 351.248 c
378.585 351.248 378.123 350.8789 378.123 350.5254 c
378.123 349.1563 384.4902 350.833 384.4902 347.2949 c
384.4902 345.9727 383.4902 344.5117 380.1533 344.5117 c
377.585 344.5117 376.4463 345.2188 376.0928 345.2188 c
375.9697 345.2188 375.877 345.1113 375.7852 345.0186 c
375.6006 345.0654 L
376.7393 347.8027 l
f
*U
*u
393.7979 347.5566 m
393.6133 347.5566 L
393.5664 347.7568 393.46 347.9102 393.1523 347.9102 c
390.291 347.9102 L
390.291 346.4805 L
395.2285 346.4805 L
395.3975 346.4805 395.459 346.5566 395.5049 346.9414 c
395.6895 346.9414 L
395.6895 344.2656 L
395.5049 344.2656 L
395.459 344.5273 395.3975 344.6035 395.2285 344.6035 c
387.5527 344.6035 L
387.5527 344.7891 L
387.9375 344.8193 387.9844 344.9268 387.9844 345.0654 c
387.9844 352.2324 L
387.9844 352.3711 387.9375 352.4785 387.5527 352.5098 c
387.5527 352.6943 L
395.2285 352.6943 L
395.3975 352.6943 395.459 352.7715 395.5049 353.125 c
395.6895 353.125 L
395.6895 350.4482 L
395.5049 350.4482 L
395.459 350.8018 395.3975 350.8789 395.2285 350.8789 c
390.291 350.8789 L
390.291 349.6025 L
393.1523 349.6025 L
393.46 349.6025 393.5664 349.7559 393.6133 349.9561 c
393.7979 349.9561 L
393.7979 347.5566 l
f
*U
U
u
*u
0 0.76 0.56 0.56 (PANTONE 195 CV) 0 x
379.2432 452.3506 m
383.1816 453.2197 385.8457 456.6367 388.3066 459.8799 c
388.5381 459.7061 L
385.4688 455.6519 382.5439 451.8003 376.9268 451.8003 c
374.9277 451.8003 372.7852 452.5532 372.7852 454.8989 c
372.7852 456.1152 373.5098 457.5342 374.8701 457.5342 c
375.7686 457.5342 376.2607 456.9258 376.2607 456.2891 c
376.2607 455.478 375.71 455.0439 375.1025 455.0439 c
374.8701 455.0439 374.668 455.0728 374.4648 455.1885 c
374.2617 454.8413 374.1172 454.4355 374.1172 454.0015 c
374.1172 452.9297 375.0732 452.1479 376.2021 452.1479 c
377.6211 452.1479 379.1563 453.1328 379.1563 454.6382 c
379.1563 455.6519 378.5771 456.4629 377.998 457.2158 c
377.4189 457.9976 376.8398 458.7505 376.8398 459.6479 c
376.8398 461.8198 379.04 462.9204 381.0957 462.9204 c
382.9492 462.9204 384.3682 462.0806 384.3682 460.6328 c
384.3682 459.5322 383.5293 458.7212 382.4277 458.7212 c
382.0811 458.7212 381.7617 458.8081 381.5889 458.8662 c
381.9941 459.6191 382.168 460.4009 382.168 461.125 c
382.168 461.9067 381.7334 462.5728 380.835 462.5728 c
379.7646 462.5728 379.1563 461.8198 379.1563 460.8066 c
379.1563 459.7349 379.7354 458.9531 380.3145 458.1714 c
380.8936 457.4185 381.4727 456.6074 381.4727 455.4492 c
381.4727 453.9434 380.3721 452.6694 379.2432 452.4087 C
379.2432 452.3506 l
f
*U
*u
233.1362 473.374 m
227.2578 466.7139 222.0454 459.3008 222.0454 454.0015 c
222.0454 453.0166 222.4219 452.6113 223.001 452.6113 c
224.1016 452.6113 226.0996 454.0015 228.0107 455.9414 c
229.2559 457.2158 230.8198 459.1558 231.4858 459.9956 c
231.7173 459.8506 L
230.8486 458.6924 229.7773 457.2446 227.9531 455.4204 c
225.9839 453.4512 224.0435 451.9741 222.0747 451.9741 c
220.1343 451.9741 219.6133 453.3062 219.6133 454.7544 c
219.6133 457.0996 220.5107 459.3008 221.5532 461.2695 c
217.499 461.2695 L
214.3428 457.5342 209.6226 452.2061 204.3232 452.2061 c
202.0356 452.2061 199.835 453.2485 199.835 455.623 c
199.835 456.7231 200.4722 457.8525 201.6885 457.8525 c
202.4414 457.8525 203.0781 457.3027 203.0781 456.6074 c
203.0781 455.5649 202.4121 455.1309 201.3989 455.1309 c
201.3989 453.48 203.0781 452.5532 204.4683 452.5532 c
209.6514 452.5532 214.5747 458.4609 217.7021 461.9937 c
221.9297 466.7427 226.8525 471.6655 232.9336 473.5479 C
233.1362 473.374 l
f
1 D
221.7271 461.6172 m
223.8696 465.4106 226.6787 468.8857 229.8931 471.897 c
229.835 471.9551 L
225.2886 469.5806 221.582 465.874 217.8179 461.6172 C
221.7271 461.6172 l
f
*U
*u
0 D
239.6816 457.6499 m
241.1587 459.5034 243.8228 462.9204 246.3999 462.9204 c
247.645 462.9204 248.4561 461.9937 248.4561 461.0093 c
248.4561 458.4028 244.3438 455.3623 244.3438 453.2485 c
244.3438 452.814 244.5464 452.4956 244.9521 452.4956 c
245.7627 452.4956 247.0371 453.3931 248.8325 455.1885 c
250.3091 456.6655 251.7861 458.4028 252.8286 459.7637 c
253.0601 459.6479 L
252.1626 458.5186 250.6279 456.5786 248.9771 454.9282 c
246.7764 452.7271 245.5889 451.9741 244.1699 451.9741 c
242.8091 451.9741 242.0273 452.814 242.0273 453.9727 c
242.0273 456.4629 246.1392 459.9087 246.1392 461.3857 c
246.1392 461.9355 245.7627 462.2251 245.3574 462.2251 c
242.8672 462.2251 237.9731 454.7832 236.6411 452.3799 c
233.5718 452.2637 L
236.207 456.4048 238.813 459.8799 238.813 461.2988 c
238.813 461.7622 238.5522 462.2251 237.9731 462.2251 c
235.541 462.2251 230.502 454.7832 229.1411 452.3799 c
226.2163 452.2637 L
228.3301 455.6519 230.4443 459.04 232.4424 462.5146 c
235.8301 462.6885 L
231.979 457.4185 L
232.0371 457.3604 L
233.6587 459.2427 236.1201 462.9204 239.1895 462.9204 c
240.2607 462.9204 241.1294 462.3413 241.1294 461.1826 c
241.1294 460.1113 240.2607 458.6636 239.624 457.708 C
239.6816 457.6499 l
f
*U
*u
265.5322 459.8506 m
264.3447 458.2583 263.0415 456.6655 261.1592 454.957 c
258.4951 452.5532 256.0049 451.8003 253.8623 451.8003 c
251.6611 451.8003 250.3003 453.2485 250.3003 455.3335 c
250.3003 459.04 255.3101 462.9204 258.9297 462.9204 c
260.5801 462.9204 261.5649 462.2544 261.5649 461.0957 c
261.5649 458.2871 255.252 457.0708 253.2251 456.6367 c
253.1382 456.2891 253.0801 455.9414 253.0801 455.5938 c
253.0801 453.9434 254.0649 452.7852 255.7153 452.7852 c
257.3369 452.7852 259.3643 453.7988 261.333 455.623 c
262.8389 457.042 264.2871 458.7212 265.3291 460.0537 C
265.5322 459.8506 l
f
1 D
258.4663 462.5728 m
256.5264 462.5728 253.7754 458.8662 253.2832 456.9258 c
256.4395 457.563 259.248 459.9375 259.248 461.8198 c
259.248 462.3413 258.9297 462.5728 258.4663 462.5728 c
f
*U
*u
0 D
260.6548 452.2637 m
262.624 455.6519 264.6802 459.0107 266.6782 462.457 c
269.979 462.5728 L
266.1567 457.1865 L
266.2148 457.1289 L
269.1104 460.7197 270.79 461.3564 271.3691 461.9355 c
272.209 462.7754 272.7012 462.8623 274.873 462.9204 c
274.1489 461.8779 273.396 460.7485 273.396 459.4453 c
273.396 458.5767 273.8018 458.2002 274.6416 458.2002 c
275.7417 458.2002 276.7261 459.2139 277.4214 459.9375 c
277.5371 459.793 L
276.4658 458.4609 274.96 457.5054 273.2227 457.5054 c
271.6875 457.5054 270.7319 458.3452 270.7319 459.9087 c
270.7319 460.4009 270.9058 460.9224 271.1665 461.3276 c
271.1084 461.3857 L
267.8364 459.2139 265.2881 455.5073 263.5796 452.3506 C
260.6548 452.2637 l
f
*U
*u
281.3262 462.457 m
277.7065 456.7524 276.1426 454.5225 276.1426 453.3354 c
276.1426 452.8721 276.3164 452.5532 276.6641 452.5532 c
277.417 452.5532 278.8359 453.3643 280.9497 455.5073 c
282.6582 457.2446 284.2798 459.1558 284.9746 459.9668 c
285.2354 459.793 L
284.2798 458.5767 282.4268 456.4917 280.9209 454.9858 c
278.6909 452.7559 277.1851 451.9741 275.8242 451.9741 c
274.5498 451.9741 273.8262 452.7559 273.8262 453.8564 c
273.8262 455.3623 274.8975 456.8682 278.3438 462.312 C
281.3262 462.457 l
f
284.3955 467.5244 m
284.3955 466.7427 283.6719 465.9897 282.8896 465.9897 c
282.0503 465.9897 281.3262 466.4243 281.3262 467.3218 c
281.3262 468.2197 282.1367 468.8857 283.0059 468.8857 c
283.7295 468.8857 284.3955 468.2485 284.3955 467.5244 c
f
*U
*u
297.4004 459.7349 m
294.5625 456.231 290.7397 451.8003 285.875 451.8003 c
283.5586 451.8003 282.2842 453.1035 282.2842 455.5073 c
282.2842 459.2139 287.1201 462.9204 290.9717 462.9204 c
292.7378 462.9204 293.8672 462.1094 293.8672 461.0669 c
293.8672 459.561 292.6221 458.6924 291.4351 458.6924 c
291.1455 458.6924 290.9136 458.7212 290.769 458.7505 c
291.0293 459.6479 291.4351 460.5747 291.4351 461.5015 c
291.4351 462.1675 291.0874 462.5728 290.5664 462.5728 c
288.5391 462.5728 285.0645 459.0977 285.0645 455.4204 c
285.0645 453.9434 286.02 452.7852 287.5835 452.7852 c
291.377 452.7852 295.2285 457.563 297.1396 459.8506 C
297.4004 459.7349 l
f
*U
*u
305.5566 462.2832 m
308.5684 462.457 L
307.4971 460.4009 303.3848 455.2754 303.3848 453.2197 c
303.3848 452.6982 303.6743 452.4956 304.1089 452.4956 c
305.0356 452.4956 306.7441 453.6826 308.4814 455.4492 c
309.9297 456.9258 311.6377 459.0107 312.333 459.9375 c
312.5352 459.8218 L
311.5225 458.4897 310.248 456.8101 308.4229 454.957 c
306.5986 453.1035 304.7749 451.8003 303.0083 451.8003 c
301.792 451.8003 301.0684 452.5244 301.0684 453.4512 c
301.0684 453.7407 301.0972 454.0591 301.1841 454.2041 c
301.126 454.2041 L
299.939 452.8721 298.375 451.8003 296.6665 451.8003 c
294.7847 451.8003 294.0894 453.3354 294.0894 454.957 c
294.0894 458.7212 298.6938 462.9204 302.2847 462.9204 c
303.6167 462.9204 304.3403 462.3413 304.833 461.125 C
305.5566 462.2832 l
f
1 D
298.3174 452.7852 m
300.7788 452.959 303.9639 458.7505 303.9639 460.9224 c
303.9639 461.9648 303.6455 462.5728 302.5449 462.5728 c
299.8809 462.5728 296.8691 457.2158 296.8691 454.8701 c
296.8691 453.7695 297.1299 452.7852 298.3174 452.7852 c
f
*U
*u
0 D
311.7979 463.4414 m
314.1436 463.8467 316.6045 464.7158 317.0391 467.3799 c
316.8359 467.3506 316.6045 467.2637 316.373 467.2637 c
315.6777 467.2637 315.2148 467.7563 315.2148 468.4512 c
315.2148 469.291 315.707 469.9282 316.6338 469.9282 c
317.7344 469.9282 318.4004 469.0884 318.4004 468.0166 c
318.4004 464.9761 314.3164 463.4414 311.7979 463.1519 C
311.7979 463.4414 l
f
*U
*u
318.9639 452.3506 m
322.9023 453.2197 325.5654 456.6367 328.0273 459.8799 c
328.2598 459.7061 L
325.1895 455.6519 322.2646 451.8003 316.6475 451.8003 c
314.6484 451.8003 312.5059 452.5532 312.5059 454.8989 c
312.5059 456.1152 313.2305 457.5342 314.5918 457.5342 c
315.4893 457.5342 315.9814 456.9258 315.9814 456.2891 c
315.9814 455.478 315.4307 455.0439 314.8232 455.0439 c
314.5918 455.0439 314.3887 455.0728 314.1855 455.1885 c
313.9824 454.8413 313.8389 454.4355 313.8389 454.0015 c
313.8389 452.9297 314.7939 452.1479 315.9229 452.1479 c
317.3418 452.1479 318.877 453.1328 318.877 454.6382 c
318.877 455.6519 318.2979 456.4629 317.7188 457.2158 c
317.1396 457.9976 316.5605 458.7505 316.5605 459.6479 c
316.5605 461.8198 318.7607 462.9204 320.8164 462.9204 c
322.6699 462.9204 324.0898 462.0806 324.0898 460.6328 c
324.0898 459.5322 323.25 458.7212 322.1484 458.7212 c
321.8018 458.7212 321.4824 458.8081 321.3096 458.8662 c
321.7148 459.6191 321.8887 460.4009 321.8887 461.125 c
321.8887 461.9067 321.4541 462.5728 320.5566 462.5728 c
319.4854 462.5728 318.877 461.8198 318.877 460.8066 c
318.877 459.7349 319.4561 458.9531 320.0352 458.1714 c
320.6143 457.4185 321.1934 456.6074 321.1934 455.4492 c
321.1934 453.9434 320.0928 452.6694 318.9639 452.4087 C
318.9639 452.3506 l
f
*U
*u
348.416 466.3374 m
348.5029 465.874 348.6191 465.063 348.6191 464.2524 c
348.6191 460.6616 346.5918 457.4761 342.5664 457.4761 c
339.6426 457.4761 337.9043 459.5034 337.9043 462.3701 c
337.9043 468.7119 346.4766 473.1714 352.7891 473.1714 c
355.3662 473.1714 357.5664 472.708 359.71 471.8105 c
361.2148 472.4473 362.7793 473.0845 364.4297 473.1714 c
364.4883 472.9976 L
363.416 472.9976 361.1582 472.1289 360.4336 471.4336 c
361.9102 470.5938 362.8662 469.2329 362.8662 467.4956 c
362.8662 464.1655 359.1885 462.8911 356.4961 462.457 c
356.4668 462.3989 L
358.8701 462.1094 361.2441 461.7622 361.2441 458.7212 c
361.2441 454.4648 357.248 451.8003 353.3105 451.8003 c
351.6885 451.8003 349.748 452.6113 349.748 454.4067 c
349.748 455.3911 350.5596 456.2598 351.5439 456.2598 c
352.123 456.2598 352.6436 456.0571 353.0781 455.6807 c
352.2969 455.2173 351.9492 454.4937 351.9492 453.6538 c
351.9492 452.6694 352.5283 452.1479 353.5127 452.1479 c
356.5527 452.1479 358.4648 455.8545 358.4648 458.5479 c
358.4648 461.0957 357.1318 462.2251 354.3809 462.2251 c
354.4102 462.457 L
357.248 462.6309 360.2598 464.1655 360.2598 467.6113 c
360.2598 468.6826 359.8828 469.7251 359.0439 470.4492 c
353.252 465.8452 351.6592 451.8003 340.1924 451.8003 c
337.7314 451.8003 335.2402 453.1616 335.2402 455.5361 c
335.2402 456.6367 335.8486 457.5923 337.0645 457.5923 c
337.9629 457.5923 338.5127 456.9839 338.5127 456.1729 c
338.5127 455.4492 337.9336 454.8989 337.4707 454.812 c
337.4414 454.6963 337.4414 454.5806 337.4414 454.4648 c
337.4414 452.9009 338.5127 452.1479 340.4521 452.1479 c
348.3584 452.1479 349.5449 466.395 358.2617 471.0864 c
356.7275 472.2734 354.5557 472.8237 352.6152 472.8237 c
347.1133 472.8237 340.2207 468.8276 340.2207 462.2544 c
340.2207 460.3721 341.2354 457.9976 343.4355 457.9976 c
346.418 457.9976 348.2715 460.9512 348.2715 464.1367 c
348.2715 465.063 348.1563 465.7002 348.0977 466.3081 C
348.416 466.3374 l
f
*U
*u
375.584 457.0835 m
374.3965 455.4907 375.2852 456.6655 373.4023 454.957 c
370.7393 452.5532 368.248 451.8003 366.1055 451.8003 c
363.9043 451.8003 362.5439 453.2485 362.5439 455.3335 c
362.5439 459.04 367.5537 462.9204 371.1729 462.9204 c
372.8232 462.9204 373.8086 462.2544 373.8086 461.0957 c
373.8086 458.2871 367.4961 457.0708 365.4688 456.6367 c
365.3818 456.2891 365.3232 455.9414 365.3232 455.5938 c
365.3232 453.9434 366.3086 452.7852 367.959 452.7852 c
369.5811 452.7852 371.6074 453.7988 373.5771 455.623 c
375.082 457.042 374.207 455.918 375.25 457.25 C
375.584 457.0835 l
f
1 D
370.71 462.5728 m
368.7695 462.5728 366.0186 458.8662 365.5264 456.9258 c
368.6836 457.563 371.4922 459.9375 371.4922 461.8198 c
371.4922 462.3413 371.1729 462.5728 370.71 462.5728 c
f
*U
*u
0 D
387.3164 461.9355 m
387.5195 462.457 L
389.75 462.457 L
391.9219 466.1055 L
395.0488 466.2212 L
392.6445 462.457 L
396.3232 462.457 L
396.0625 461.9355 L
392.3271 461.9355 L
388.8516 456.2021 387.665 454.4648 387.665 453.3354 c
387.665 452.8428 387.9541 452.4956 388.4463 452.4956 c
389.4023 452.4956 391.1104 453.5381 392.9063 455.2754 c
394.1514 456.4917 395.7148 458.2871 396.9893 459.9668 c
397.1621 459.8218 L
396.2939 458.6636 394.875 456.8682 393.2529 455.2466 c
391.458 453.4512 389.4316 451.9741 387.665 451.9741 c
386.4482 451.9741 385.3477 452.4668 385.3477 453.8564 c
385.3477 455.8545 387.1729 457.9395 389.4893 461.9355 C
387.3164 461.9355 l
f
*U
U
-4014 452.3335 m
4626 452.3335 L
(N) *
-4014 455.75 m
4626 455.75 L
(N) *
-4014 344.584 m
4626 344.584 L
(N) *
454.5 4716 m
454.5 -3924 L
(N) *
153.25 4716 m
153.25 -3924 L
(N) *
196.25 4716 m
196.25 -3924 L
(N) *
406.75 4716 m
406.75 -3924 L
(N) *
396 4716 m
396 -3924 L
(N) *
206.5 4716 m
206.5 -3924 L
(N) *
LB
%AI5_EndLayer--
%%PageTrailer
gsave annotatepage grestore showpage
%%Trailer
Adobe_Illustrator_AI5 /terminate get exec
Adobe_shading_AI8 /terminate get exec
Adobe_ColorImage_AI6 /terminate get exec
AGM_Gradient /terminate get exec
Adobe_cshow /terminate get exec
Adobe_level2_AI5 /terminate get exec
%%EOF